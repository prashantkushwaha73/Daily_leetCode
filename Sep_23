**********************************************************************************
**** 338. Counting Bits ( 01/09/23 ) ***

class Solution {
public:
   
   int solve(int n){
       int count = 0;
       while(n){
           if(n%2){
               count++;
           }
           n/=2;
       }
       return count;
   }

    vector<int> countBits(int n) {
        vector<int> ans;
        for(int i=0;i<=n;i++){
            ans.push_back(solve(i));
        }
        return ans;
    }
};

***************************************************************************************
**** 62. Unique Paths ( 03/09/23 ) ****

class Solution {
public:
  
   int solve(int x,int y,int m,int n,vector<vector<int>>& dp){
       if(dp[x][y] != -1){
           return dp[x][y];
       }
       dp[x][y] = 0;
       ///////// right
       if(y+1 < n){
           dp[x][y] += solve(x,y+1,m,n,dp);
       }
       ///////// down
       if(x+1 < m){
            dp[x][y] += solve(x+1,y,m,n,dp);
       }
       return dp[x][y];
   }

    int uniquePaths(int m, int n) {
        int ans = 0;
        vector<vector<int>> dp;
        vector<int> v;
        for(int j=0;j<n;j++){
            v.push_back(-1);
        }
        for(int i=0;i<m;i++){
            dp.push_back(v);
        }
        dp[m-1][n-1] = 1;
        return solve(0,0,m,n,dp);
    }
};

*************************************************************************************************
**** 141. Linked List Cycle ( 04/09/23 ) ****

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL){
            return false;
        }
        if(head->next == NULL){
            return false;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL && slow!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;
            }
            slow=slow->next;
            if(slow==fast){
                return true;
            }
        }
        return false;
    }
};

*****************************************************************************************
**** 725. Split Linked List in Parts ( 06/09/23 ) ****

class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> ans;
        int cc=0;
        if(head==NULL){
            while(cc<k){
                ans.push_back(NULL);
                cc++;
            }
            return ans;
        }
        int count=0;
        ListNode* temp=head;
                                // count , How many elements are present in the list
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        if(count<=k){
            temp=head;
            ListNode* pemp=head->next;
            while(temp!=NULL){
                temp->next=NULL;
                ans.push_back(temp);
                temp=pemp;
                if(pemp!=NULL){
                pemp=pemp->next; }
            }
            cc=count;
            while(cc<k){
                ans.push_back(NULL);
                cc++;
            }
            return ans;
                                       
        }
        
        ListNode* prev=head;
        ListNode* forw=head->next;
        temp=head;
        cc=0; int p=((count-(count/k)*k)); int m=0,n=0;
        while(cc<k){
            m=1;
            if(p>=1){
                n=(count/k)+1;
            }
            else{
                n=(count/k);
            }
            while(m<n){
                prev=forw;
                forw=forw->next;
                m++;
            }
            prev->next=NULL;
            ans.push_back(temp);
            prev=forw;
            temp=forw;
            if(forw!=NULL){
                forw=forw->next;
            }
            p--;

            cc++;
        }
        return ans;
    }
};

************************************************************************************
**** 118. Pascal's Triangle ( 08/09/23 ) ****

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
       
        int i=0;
        vector<vector<int>> ans;
         if(numRows==0){
            return ans;
        }
        vector<int> fill;
        for(int n=1;n<=numRows;n++){
            if(n==1){
                fill.push_back(1);
                ans.push_back(fill);
                fill.clear();
            }
            else if(n==2){
                fill.push_back(1);
                fill.push_back(1);
                ans.push_back(fill);
                fill.clear();
            }
            else{
                fill.push_back(1);
                for(int i=1;i<n-1;i++){
                    fill.push_back(ans[n-2][i-1] + ans[n-2][i]);
                }
                fill.push_back(1);
                ans.push_back(fill);
                fill.clear();
            }
        }
        return ans;
    }
};

******************************************************************************************************
**** 377. Combination Sum IV ( 09/09/23 ) ****

class Solution {
public:
    
    int solve(int start,int target,vector<int>& nums,vector<int>& dp,int n){
        if(start == target){
            return 1;
        }
        if(start > target){
            return 0;
        }
        if(dp[start] != -1){
            return dp[start];
        }
        n = 0;
        for(int i=0;i<nums.size();i++){
            n += solve(start+nums[i],target,nums,dp,n);
        }
        if(n >= 0){
            dp[start] = n;
        }
        return n;
    }

    int combinationSum4(vector<int>& nums, int target) {
        int n;
        sort(nums.begin(),nums.end());
        vector<int> dp(target+1,-1);
        return solve(0,target,nums,dp,n);
    }
};

************************************************************************************************
**** 1282. Group the People Given the Group Size They Belong To ( 11/09/23 ) ****

class Solution {
public:
    vector<vector<int>> groupThePeople(vector<int>& nums) {
        unordered_map<int,vector<int>> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]].push_back(i);
        }
        vector<vector<int>> ans;
        vector<int> v;
        for(auto i:m){
            for(int p=0;p<i.second.size();p++){
                if(v.size()<i.first){
                    v.push_back(i.second[p]);
                }
                else{
                    ans.push_back(v);
                    v.clear();
                    p--;
                }
            }
            ans.push_back(v);
            v.clear();
        }
        return ans;
    }
};

***************************************************************************************************
**** 1647. Minimum Deletions to Make Character Frequencies Unique ( 12/09/23 ) ****

class Solution {
public:
    int minDeletions(string s) {
        unordered_map<char,int> m1;
        for(int i=0;i<s.size();i++){
            m1[s[i]]++;
        }
        vector<int> v;
        unordered_map<int,bool> m2;
        for(auto i:m1){
            if(m2[i.second]){
                v.push_back(i.second);
            }
            else{
                m2[i.second]=true;
            }
        }
        int ans = 0;
        for(int i=v.size()-1;i>=0;i--){
            if(m2[v[i]]){
                while(m2[v[i]] && v[i]>0){
                    v[i]--;
                    ans++;
                }
                if(v[i]>0){
                m2[v[i]] = true;}
            }
        }
        return ans;
    }
};

*****************************************************************************************************************
**** 1337. The K Weakest Rows in a Matrix ( 18/09/23 ) ****

class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
     priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
      int count = 0;
      for(int i=0;i<mat.size();i++){
          count = 0;
          for(int j=0;j<mat[i].size();j++){
              if(mat[i][j]){
                  count++;
              }
              else{
                  break;
              }
          }
          pq.push({count,i});
      }
      vector<int> ans;
      while(k){
          ans.push_back(pq.top().second);
          pq.pop();
          k--;
      }
      return ans;
    }
};

*******************************************************************************************************
**** 287. Find the Duplicate Number ( 19/09/23 ) ****

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        vector<bool> v(nums.size(),false);
        for(int i=0;i<nums.size();i++){
            if(v[nums[i]]){
                return nums[i];
            }
            else{
                v[nums[i]] = true;
            }
        }
        return true;
    }
};

*******************************************************************************************************
**** 4. Median of Two Sorted Arrays ( 21/09/23 ) ****

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double ans=0;
        if(nums1.size()+nums2.size() == 1){
            if(nums1.size()>0){
             ans = nums1[0];
                return ans;
            }
            else{
                ans = nums2[0];
                return ans;
            }
        }
        
        int count=0;
        int n = ((nums1.size()+nums2.size())/2)-1,i=0,j=0;
        while(i<nums1.size()&&j<nums2.size() && count<n) {
            if(nums1[i]<nums2[j]){
                count++;
                i++;
            }
            else{
                count++;
                j++;
            }
        }
        while(i<nums1.size()&& count<n){
            count++;
            i++;
        }
         while(j<nums2.size()&& count<n){
            count++;
            j++;
        }
       if((nums1.size()+nums2.size())%2){
           if(i<nums1.size()&&j<nums2.size()){
              if(nums1[i]<nums2[j]){
                  i++;
              }
               else{
                   j++;
               }
           }
           else if(i<nums1.size()){
               i++;
           }
           else{
               j++;
           }
           
           
                      if(i<nums1.size()&&j<nums2.size()){
              if(nums1[i]<nums2[j]){
                  ans = nums1[i];
                  return ans;
              }
               else{
                   ans = nums2[j];
                   return ans;
               }
           }
           if(i<nums1.size()){
               ans = nums1[i];
               return ans;
           }
           else{
               ans = nums2[j];
               return ans;
           }
       }
        else{
                       if(i<nums1.size()&&j<nums2.size()){
              if(nums1[i]<nums2[j]){
                  ans += nums1[i];
                  i++;
              }
               else{
                   ans += nums2[j];
        j++;
               }
           }
           else if(i<nums1.size()){
               ans += nums1[i];
               i++;
             
           }
           else{
               ans += nums2[j];
               j++;
           }
            
                       if(i<nums1.size()&&j<nums2.size()){
              if(nums1[i]<nums2[j]){
                  ans += nums1[i];
                  return ans/2;
              }
               else{
                   ans += nums2[j];
                   return ans/2;
               }
           }
           if(i<nums1.size()){
               ans += nums1[i];
               return ans/2;
           }
           else{
               ans += nums2[j];
               return ans/2;
           }
        }
    }
};

********************************************************************************************
**** 392. Is Subsequence  ( 22/09/23 ) ****

class Solution {
public:
    bool isSubsequence(string s, string t) {
        int i = 0,j = 0;
        while(i<s.size()){
            if(j >= t.size()){
                  return false;
            }
            if(s[i] == t[j]){
                i++; j++;
            }
            else{
                j++;
            }
        }
        return true;
    }
};

**********************************************************************************************
**** 389. Find the Difference ( 25/09/23 ) ****

class Solution {
public:
    char findTheDifference(string s, string t) {
        unordered_map<char,int> m;
        for(int i=0;i<s.size();i++){
            m[s[i]]++;
        }
        for(int i=0;i<t.size();i++){
            m[t[i]]--;
        }
        for(auto i:m){
            if(i.second == -1){
                return i.first;
            }
        }
        return 'a';
    }
};

********************************************************************************************
