********************************************************************************************************************************************************************************************
**** 1550. Three Consecutive Odds ( 01/07/24 ) ****

class Solution {
public:
    bool threeConsecutiveOdds(vector<int>& arr) {
        for(int i=2;i<arr.size();i++){
            if(arr[i-2]%2==1 && arr[i-1]%2==1 && arr[i]%2==1){
                return true;
            }
        }
        return false;
    }
};

*************************************************************************************************************************************************************************************************
**** 350. Intersection of Two Arrays II ( 02/07/24 ) ****

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int i=0,j=0,n=nums1.size(),m=nums2.size();
        vector<int> ans;
        while(i<n && j<m){
             if(nums1[i]==nums2[j]){
                ans.push_back(nums1[i]);
                i++; j++;
             }
             else if(nums1[i]>nums2[j]){
                  j++;
             }
             else{
                i++;
             }
        }
        return ans;
    }
};

**************************************************************************************************************************************************
**** 2058. Find the Minimum and Maximum Number of Nodes Between Critical Points ( 05/07/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        vector<int> v;
        vector<int> posi;
        while(head){
            v.push_back(head->val);
            head=head->next;
        }
        for(int i=1;i<v.size()-1;i++){
            if((v[i]<v[i-1]&&v[i]<v[i+1]) || (v[i]>v[i-1]&&v[i]>v[i+1])){
                posi.push_back(i);
            }
        }
        if(posi.size()<2){
            return {-1,-1};
        }
        int mini=INT_MAX;
        for(int i=0;i<posi.size()-1;i++){
            if(posi[i+1]-posi[i]<mini){
                mini = posi[i+1]-posi[i];
            }
        }
        return {mini,posi[posi.size()-1]-posi[0]};
    }
};

************************************************************************************************************************************************
**** 1518. Water Bottles ( 07/07/24 ) ****

class Solution {
public:
    int numWaterBottles(int num, int numExchange) {
        int ans = 0,e=0;
        while(num){
            ans += num;
            e+=num;
            num=0;
            if(e/numExchange >= 1){
                num = e/numExchange;
                e -= (e/numExchange)*numExchange;
            }
        }
        return ans;
    }
};

*****************************************************************************************************************************************************
**** 1701. Average Waiting Time ( 09/07/24 ) ****

class Solution {
public:
    double averageWaitingTime(vector<vector<int>>& customers) {
        double ans = 0;
        int time = customers[0][0];
        for(int i=0;i<customers.size();i++){
             if(time<=customers[i][0]){
                time = customers[i][0];
             }
             time += customers[i][1];
             ans += (time-customers[i][0]);
        }
        return ans/customers.size();
    }
};

******************************************************************************************************************************************************
**** 1598. Crawler Log Folder ( 10/07/24 ) ****

class Solution {
public:
    int minOperations(vector<string>& logs) {
        stack<int> st;
        for(int i=0;i<logs.size();i++){
            if(logs[i].size()==2){
                if(logs[i][logs[i].size()-2]!='.'){
                    st.push(0);
                }
            }
            else{
                if(logs[i][logs[i].size()-3]=='.'){
                    if(!st.empty()){
                        st.pop();
                    }
                }
                else{
                    st.push(0);
                }
            }
        }
        return st.size();
    }
};

*********************************************************************************************************************************************
**** 2196. Create Binary Tree From Descriptions ( 15/07/24 ) **** 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& arr) {
        unordered_map<int,bool> visited;
        unordered_map<int,TreeNode*> m;
        unordered_map<int,bool> check;
        TreeNode* naya;
        TreeNode* child;
        for(int i=0;i<arr.size();i++){
            check[arr[i][1]] = true;
            if(visited[arr[i][0]]==false){
                  naya = new TreeNode(arr[i][0]);
                  visited[arr[i][0]] = true;
                  m[arr[i][0]] = naya;
            }
            else{
                  naya = m[arr[i][0]];
            }
            if(visited[arr[i][1]]==false){
                child = new TreeNode(arr[i][1]);
                visited[arr[i][1]] = true;
                m[arr[i][1]] = child;
            }
            else{
                child = m[arr[i][1]];
            }
            if(arr[i][2]){
                naya->left = child;
            }
            else{
                naya->right = child;
            }
        }
        for(int i=0;i<arr.size();i++){
            if(check[arr[i][0]]==false){
                return m[arr[i][0]];
            }
        }
      return NULL;
    }
};

**************************************************************************************************************************************************
**** 1110. Delete Nodes And Return Forest ( 17/07/24 ) ****

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
 
    void solve(TreeNode* root,unordered_map<int,bool>& m,vector<TreeNode*>& ans){
        if(root==NULL){
            return;
        }
        solve(root->left,m,ans);
        solve(root->right,m,ans);
         if(root->left && m[root->left->val]){
             root->left = NULL;
        }
        if(root->right && m[root->right->val]){
            root->right = NULL;
        }
        if(m[root->val]){
            if(root->left){
                ans.push_back(root->left);
                root->left = NULL;
            }
            if(root->right){
                ans.push_back(root->right);
                root->right = NULL;
            }
        }
       
    }
   
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& arr) {
        unordered_map<int,bool> m;
        for(int i=0;i<arr.size();i++){
            m[arr[i]] = true;
        }
        vector<TreeNode*> ans;
        solve(root,m,ans);
        if(root->left && m[root->left->val]){
             root->left = NULL;
        }
        if(root->right && m[root->right->val]){
            root->right = NULL;
        }
        if(m[root->val]){
            if(root->left){
                ans.push_back(root->left);
                root->left = NULL;
            }
            if(root->right){
                ans.push_back(root->right);
                root->right = NULL;
            }
        }
        
        if(m[root->val]==false){
            ans.push_back(root);
        }
        return ans;
    }
};

*************************************************************************************************************************************************
**** 912. Sort an Array ( 25/07/24 ) ****

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        return nums;   
    }
};

***************************************************************************************************************************************************
**** 1395. Count Number of Teams ( 29/07/24 ) ****

class Solution {
public:
    int numTeams(vector<int>& rating) {
        int n = rating.size();
        vector<int> big(n,0);
        vector<int> small(n,0);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(rating[j]>rating[i]){
                    big[i]++;
                }
                if(rating[j]<rating[i]){
                    small[i]++;
                }
            }
        }
        int ans = 0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                 if(rating[j]>rating[i]){
                    ans+=big[j];
                 }
                 if(rating[j]<rating[i]){
                    ans+=small[j];
                 }
            }
        }
        return ans;
    }
};

******************************************************************************************************************************************************
