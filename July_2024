********************************************************************************************************************************************************************************************
**** 1550. Three Consecutive Odds ( 01/07/24 ) ****

class Solution {
public:
    bool threeConsecutiveOdds(vector<int>& arr) {
        for(int i=2;i<arr.size();i++){
            if(arr[i-2]%2==1 && arr[i-1]%2==1 && arr[i]%2==1){
                return true;
            }
        }
        return false;
    }
};

*************************************************************************************************************************************************************************************************
**** 350. Intersection of Two Arrays II ( 02/07/24 ) ****

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int i=0,j=0,n=nums1.size(),m=nums2.size();
        vector<int> ans;
        while(i<n && j<m){
             if(nums1[i]==nums2[j]){
                ans.push_back(nums1[i]);
                i++; j++;
             }
             else if(nums1[i]>nums2[j]){
                  j++;
             }
             else{
                i++;
             }
        }
        return ans;
    }
};

**************************************************************************************************************************************************
**** 2058. Find the Minimum and Maximum Number of Nodes Between Critical Points ( 05/07/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        vector<int> v;
        vector<int> posi;
        while(head){
            v.push_back(head->val);
            head=head->next;
        }
        for(int i=1;i<v.size()-1;i++){
            if((v[i]<v[i-1]&&v[i]<v[i+1]) || (v[i]>v[i-1]&&v[i]>v[i+1])){
                posi.push_back(i);
            }
        }
        if(posi.size()<2){
            return {-1,-1};
        }
        int mini=INT_MAX;
        for(int i=0;i<posi.size()-1;i++){
            if(posi[i+1]-posi[i]<mini){
                mini = posi[i+1]-posi[i];
            }
        }
        return {mini,posi[posi.size()-1]-posi[0]};
    }
};

************************************************************************************************************************************************
