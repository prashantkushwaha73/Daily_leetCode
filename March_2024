**************************************************************************************************************************
**** 2864. Maximum Odd Binary Number ( 01/03/24 ) ****

class Solution {
public:
    string maximumOddBinaryNumber(string s) {
       int z = 0, o = 0;
       for(int i=0;i<s.size();i++){
           if(s[i]=='1'){
               o++;
           }
           else{
               z++;
           }
       }
       string ans = "";
       o--;
       while(o){
           ans += '1';
           o--;
       }
       while(z){
           ans += '0';
           z--;
       }
       ans += '1';
       return ans;
    }
};

************************************************************************************************************************
**** 977. Squares of a Sorted Array ( 02/03/24 ) ****

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for(int i=0;i<nums.size();i++){
            nums[i] = pow(nums[i],2);
        }
        sort(nums.begin(),nums.end());
        return nums;
    }
};

*****************************************************************************************************************************
**** 19. Remove Nth Node From End of List ( 03/03/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int count=0;
        ListNode* trav=head;
        while(trav!=NULL){
            count++;
            trav=trav->next;
        }
        if(count==1 && n==1){
            return NULL;
        }
        trav=head;
        if(n==1){
            for(int i=1;i<count-1;i++){
                trav=trav->next;
            }
            trav->next=NULL;
            return head;
        }
        else if(n==count){
            return head->next;
        }
        else{
            ListNode* tempo=head->next->next;
            trav=head;
            for(int i=1;i<(count-n);i++){
                tempo=tempo->next;
                trav=trav->next;
            }
            trav->next=tempo;
            return head;
        }
        return head;
    }
};

*********************************************************************************************************************************
**** 349. Intersection of Two Arrays ( 10/03/24 ) ****

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int i=0,j=0,n=nums1.size(),m=nums2.size();
        while(i<n && j<m){
            if(nums1[i]==nums2[j]){
                if(i+1<n && j+1<m && nums1[i+1]==nums1[i] && nums2[j+1]==nums2[j]){
                    i++; j++; 
                    continue;
                }
                ans.push_back(nums1[i]);
                i++; j++;
            }
            else if(nums1[i]<nums2[j]){
                i++;
            }
            else{
                j++;
            }
        }
        return ans;
    }
};

**********************************************************************************************************************************
**** 791. Custom Sort String ( 11/03/24 ) ****

class Solution {
public:
    string customSortString(string order, string s) {
        unordered_map<char,int> m;
        for(int i=0;i<s.size();i++){
            m[s[i]]++;
        }
        string ans = "";
        for(int i=0;i<order.size();i++){
            while(m[order[i]]){
                ans+=order[i];
                m[order[i]]--;
            }
        }
        for(auto i:m){
            while(i.second){
                ans+=i.first;
                i.second--;
            }
        }
        return ans;
    }
};

**************************************************************************************************************************************
**** 1171. Remove Zero Sum Consecutive Nodes from Linked List ( 12/03/24 ) ****
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    pair<ListNode*,bool> solve(ListNode* head){
        int sum = head->val;
        if(sum==0){
            return {head->next,false};
        }
        ListNode* temp = head->next;
        while(temp){
            sum += temp->val;
            if(sum==0){
                return {temp->next,false};
            }
            temp = temp->next;
        }
        return {head,true};
   }

    ListNode* removeZeroSumSublists(ListNode* head) {
        ListNode* ans = new ListNode(-1);
        ListNode* pemp = ans;
        pair<ListNode*,bool> p;
        p = solve(head);
        while(1){
            if(p.first==NULL){
                return ans->next;
            }
           if(p.second){
             pemp->next = new ListNode(p.first->val);
             pemp = pemp->next;
             if(p.first->next==NULL){
                return ans->next;
             }
             p = solve(p.first->next);
           }
           else{
            if(p.first==NULL){
                return ans->next;
            }
            p = solve(p.first);
           }
        }
        return ans->next;
    }
};

**************************************************************************************************************************
**** 2485. Find the Pivot Integer ( 13/03/24 ) ****

class Solution {
public:
    int pivotInteger(int n) {
        int a=1,suma=1;
        int b=n,sumb=n;
        while(1){
            if(suma==sumb && a==b){return a;}
            else if(suma>sumb){sumb+=(--b);}
            else{suma+=(++a);}
            if(a>b){return -1;}
        }
        return a;
    }
};

**************************************************************************************************************************
**** 452. Minimum Number of Arrows to Burst Balloons ( 18/03/24 ) ****

class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        sort(points.begin(),points.end());
        int ans=0,start=0,finish=0,maxi=points[0][0],mini=points[0][1];
        while(finish < points.size()){
            while( finish < points.size() && points[finish][0]>=maxi && points[finish][0]<=mini){
                maxi=max(maxi,points[finish][0]);
                mini=min(mini,points[finish][1]);
                finish++;
            }
            if(finish<points.size()){
                maxi=points[finish][0];
                mini=points[finish][1];
            }
            ans++;
            start=finish;   
        }
        return ans;
    }
};

**********************************************************************************************************************************
**** 621. Task Scheduler ( 19/03/24 ) ****

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char,int> m;
        for(int i=0;i<tasks.size();i++){
            m[tasks[i]]++;
        }
        priority_queue<int> pq;
        for(auto i:m){
            pq.push(i.second);
        }
        queue<int> q;
        int ans = 0;
        int v,size;
        while(!pq.empty()){
            size = pq.size();
            if(n<size){
                  for(int i=0;i<=n;i++){
                    v=pq.top();
                    pq.pop();
                    ans++;
                    v--;
                    if(v){
                        q.push(v);
                    }
                  }
                  while(!q.empty()){
                    pq.push(q.front());
                    q.pop();
                  }
            }
            else{
                 for(int i=0;i<size;i++){
                v=pq.top();
                pq.pop();
                ans++;
                v--;
                if(v){
                    q.push(v);
                }
            }
            while(!q.empty()){
                    pq.push(q.front());
                    q.pop();
                }
            if(pq.size()){
                ans += (n-size+1);
            }
            }
            
        }
        return ans;
    }
};

****************************************************************************************************************************
**** 1669. Merge In Between Linked Lists ( 20/03/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
   
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode* e;
        ListNode* temp = list2;
        while(temp->next){
            temp=temp->next;
        }
        e=temp;
        temp=list1;

        bool flag = false;
        if(a==0){
             flag = true;
        }
        ListNode* first; ListNode* last;
        for(int i=0;i<=b;i++){
            if(i==a-1){
                first = temp;
            }
            if(i==b){
                last=temp;
            }
            temp=temp->next;
        }
        first->next = list2;
        e->next = last->next;
        if(flag){
            e->next = last->next;
            return list2;
        }
        return list1;
        }
};

***************************************************************************************************************************
**** Reverse Linked List ( 21/03/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev=NULL;
        ListNode* curr=head;
        ListNode* forw=NULL;
        while(curr!=NULL){
            forw=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forw;
        }
        return prev;
    }
};

***************************************************************************************************************************
**** Palindrome Linked List ( 22/03/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head->next==NULL){
            return true;
        }
        if(head->next->next==NULL){
            if(head->val == head->next->val){
                return true;
            }
        }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;
            }
            slow=slow->next;
        }
        ListNode* prev=NULL;
        ListNode* curr=slow;
        ListNode* forw=NULL;
        while(curr!=NULL){
            forw=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forw;
        }
        while(prev!=NULL){
            if(prev->val == head->val){
                prev=prev->next;
                head=head->next;
            }
            else{
                return false;
            }
        }
        return true;
    }
};

******************************************************************************************************************************
**** Reorder List ( 23/03/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        vector<int> v;
        ListNode* temp=head;
        while(temp){
            v.push_back(temp->val);
            temp=temp->next;
        }
        int i=0,j=v.size()-1;
        temp=head;
        bool flag = true;
        while(temp){
            if(flag){
                temp->val=v[i];
                i++;
                flag=false;
            }
            else{
                temp->val=v[j];
                j--;
                flag=true;
            }
            temp=temp->next;
        }
    }
};

***************************************************************************************************************************************
**** Find the Duplicate Number ( 24/03/24 ) ****

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        vector<bool> v(nums.size(),false);
        for(int i=0;i<nums.size();i++){
            if(v[nums[i]]){
                return nums[i];
            }
            else{
                v[nums[i]] = true;
            }
        }
        return true;
    }
};

********************************************************************************************************************************************
**** Find All Duplicates in an Array ( 25/03/24 ) ****

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
       int max = INT_MIN;
        int i;
        
        vector<int> ans(nums.size()+1);
        for(int i=0; i<nums.size();i++){
            ans[i]=0;
        }
        for(i=0; i<nums.size();i++){
           ans[nums[i]]++;
        }
        vector<int> maakii;
        for(i=1;i<ans.size();i++){
            if(ans[i]==2){
                maakii.push_back(i);
            }
        }
        return maakii;
        
    }
};

***************************************************************************************************************************************************
**** First Missing Positive ( 26/03/24 ) ****

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int p = 0;
        while(p<nums.size() && nums[p]<=0){
            p++;
        }
        int a=1;
        while(p<nums.size()){
            if(nums[p]!=a){
                return a;
            }
            while(p+1<nums.size() && nums[p+1]==nums[p]){
                p++;
            }
            p++;
            a++;
        }
        return a;
    }
};

****************************************************************************************************************************************************
**** Length of Longest Subarray With at Most K Frequency ( 28/03/24 ) ****

class Solution {
public:
    int maxSubarrayLength(vector<int>& nums, int k) {
        int i=0,j=0,ans=0;
        unordered_map<int,int> m;
        m[nums[0]]++;
        while(1){
             while(i+1<nums.size() && m[nums[i+1]]<k){
                i++;
                m[nums[i]]++;
             }
             ans = max(ans,i-j+1);
             if(i+1>=nums.size()){
                break;
             }
             if(i==j){
                i++; j++;
                continue;
             }
             while(j<i){
                 m[nums[j]]--;
                 j++;
                 if(i+1<nums.size() && m[nums[i+1]]<k){
                    break;
                 }
             }
             if(i+1>=nums.size()){
                return ans;
             }
        }
        return ans;
    }
};

**************************************************************************************************************************
**** Count Subarrays Where Max Element Appears at Least K Times ( 29/03/24 ) ****

class Solution {
public:
    long long countSubarrays(vector<int>& nums, int k) {
        long long ans = 0;
        int i=0,j=0,m=INT_MIN,t=0,count=0,p=0,n;
        for(int i=0;i<nums.size();i++){
            m = max(m,nums[i]);
        }
        for(int i=0;i<nums.size();i++){
            if(nums[i]==m){
                t++;
            }
        }
        if(nums[0]==m){
            count++;
        }
        while(j<nums.size()){
            while(count!=k){
                j++;
                if(j>=nums.size()){
                    return ans;
                }
                if(nums[j]==m){
                    count++;
                }
            }
            ans+=(nums.size()-j);
            if(nums[i]==m){
                count--;
                p++;
            }
            i++;
        }
        return ans;
    }
};

