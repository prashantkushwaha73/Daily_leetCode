**************************************************************************************************************************
**** 2864. Maximum Odd Binary Number ( 01/03/24 ) ****

class Solution {
public:
    string maximumOddBinaryNumber(string s) {
       int z = 0, o = 0;
       for(int i=0;i<s.size();i++){
           if(s[i]=='1'){
               o++;
           }
           else{
               z++;
           }
       }
       string ans = "";
       o--;
       while(o){
           ans += '1';
           o--;
       }
       while(z){
           ans += '0';
           z--;
       }
       ans += '1';
       return ans;
    }
};

************************************************************************************************************************
**** 977. Squares of a Sorted Array ( 02/03/24 ) ****

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for(int i=0;i<nums.size();i++){
            nums[i] = pow(nums[i],2);
        }
        sort(nums.begin(),nums.end());
        return nums;
    }
};

*****************************************************************************************************************************
**** 19. Remove Nth Node From End of List ( 03/03/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int count=0;
        ListNode* trav=head;
        while(trav!=NULL){
            count++;
            trav=trav->next;
        }
        if(count==1 && n==1){
            return NULL;
        }
        trav=head;
        if(n==1){
            for(int i=1;i<count-1;i++){
                trav=trav->next;
            }
            trav->next=NULL;
            return head;
        }
        else if(n==count){
            return head->next;
        }
        else{
            ListNode* tempo=head->next->next;
            trav=head;
            for(int i=1;i<(count-n);i++){
                tempo=tempo->next;
                trav=trav->next;
            }
            trav->next=tempo;
            return head;
        }
        return head;
    }
};

*********************************************************************************************************************************
**** 349. Intersection of Two Arrays ( 10/03/24 ) ****

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int i=0,j=0,n=nums1.size(),m=nums2.size();
        while(i<n && j<m){
            if(nums1[i]==nums2[j]){
                if(i+1<n && j+1<m && nums1[i+1]==nums1[i] && nums2[j+1]==nums2[j]){
                    i++; j++; 
                    continue;
                }
                ans.push_back(nums1[i]);
                i++; j++;
            }
            else if(nums1[i]<nums2[j]){
                i++;
            }
            else{
                j++;
            }
        }
        return ans;
    }
};

**********************************************************************************************************************************
**** 791. Custom Sort String ( 11/03/24 ) ****

class Solution {
public:
    string customSortString(string order, string s) {
        unordered_map<char,int> m;
        for(int i=0;i<s.size();i++){
            m[s[i]]++;
        }
        string ans = "";
        for(int i=0;i<order.size();i++){
            while(m[order[i]]){
                ans+=order[i];
                m[order[i]]--;
            }
        }
        for(auto i:m){
            while(i.second){
                ans+=i.first;
                i.second--;
            }
        }
        return ans;
    }
};

**************************************************************************************************************************************
**** 1171. Remove Zero Sum Consecutive Nodes from Linked List ( 12/03/24 ) ****
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    pair<ListNode*,bool> solve(ListNode* head){
        int sum = head->val;
        if(sum==0){
            return {head->next,false};
        }
        ListNode* temp = head->next;
        while(temp){
            sum += temp->val;
            if(sum==0){
                return {temp->next,false};
            }
            temp = temp->next;
        }
        return {head,true};
   }

    ListNode* removeZeroSumSublists(ListNode* head) {
        ListNode* ans = new ListNode(-1);
        ListNode* pemp = ans;
        pair<ListNode*,bool> p;
        p = solve(head);
        while(1){
            if(p.first==NULL){
                return ans->next;
            }
           if(p.second){
             pemp->next = new ListNode(p.first->val);
             pemp = pemp->next;
             if(p.first->next==NULL){
                return ans->next;
             }
             p = solve(p.first->next);
           }
           else{
            if(p.first==NULL){
                return ans->next;
            }
            p = solve(p.first);
           }
        }
        return ans->next;
    }
};

**************************************************************************************************************************
**** 2485. Find the Pivot Integer ( 13/03/24 ) ****

class Solution {
public:
    int pivotInteger(int n) {
        int a=1,suma=1;
        int b=n,sumb=n;
        while(1){
            if(suma==sumb && a==b){return a;}
            else if(suma>sumb){sumb+=(--b);}
            else{suma+=(++a);}
            if(a>b){return -1;}
        }
        return a;
    }
};

**************************************************************************************************************************
