*************************************************************************************************
**** 1376. Time Needed to Inform All Employees ( 03/06/23 ) ****

class Solution {
public:
    int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
        unordered_map<int,vector<int> >m;
        for(int i=0;i<manager.size();i++) {
            m[manager[i]].push_back(i);
        }
        queue<pair<int,int>>q;
        q.push(make_pair(headID,0));
        int maxi=0;
        while(!q.empty()) {
            int n=q.size();
            for(int i=0;i<n;i++) {
                int head=q.front().first;
                int timeTaken=q.front().second;
                q.pop();
                int dur=informTime[head]+timeTaken;
                maxi=max(maxi,dur);
                for(auto it:m[head]) {
                    q.push(make_pair(it,dur));
                }
            }
        }
        return maxi;
    }
};

*********************************************************************************************
**** 547. Number of Provinces ( 04/06/23 ) ****

class Solution {
  private: void dfs(vector < vector < int >> & isConnected, vector < bool > & visited, int v, int n) {
    visited[v] = true;
    for (int i = 0; i < n; i++) {
      if (isConnected[v][i]) {
        if (visited[i]) {
          continue;
        }
        dfs(isConnected, visited, i, n);
      }
    }
  }
  public: int findCircleNum(vector < vector < int >> & isConnected) {
    int ans = 0, n = isConnected.size();
    vector < bool > visited(n, false);
    for (int i = 0; i < n; i++) {
      if (visited[i]) {
        continue;
      }
      ans++;
      dfs(isConnected, visited, i, n);
    }
    return ans;
  }
};

****************************************************************************************************
**** 1232. Check If It Is a Straight Line ( 05/06/23 ) ****

class Solution {
public:
    bool checkStraightLine(vector<vector<int>>& coordinates) {
        vector<vector<int>> v=coordinates;
        sort(v.begin(),v.end());
        int x1=v[0][0],y1=v[0][1],x2=v[v.size()-1][0],y2=v[v.size()-1][1];
        if(x2-x1 == 0){
            for(int i=1;i<v.size();i++){
                x1=v[i-1][0]; x2=v[i][0];
                if(x2-x1 != 0){
                    return false;
                }
            }
        }
        else{
        float slope = (y2-y1)/(x2-x1);
        for(int i=1;i<v.size();i++){
            x1=v[i-1][0]; y1=v[i-1][1]; x2=v[i][0]; y2=v[i][1];
            if(x2-x1 ==0){
                return false;
            }
            if((y2-y1)/(x2-x1) != slope){
                return false;
            }
        }
        }
        return true;
    }
};

***************************************************************************************************************
**** 1502. Can Make Arithmetic Progression From Sequence ( 06/06/23 ) ****

class Solution {
public:
    bool canMakeArithmeticProgression(vector<int>& arr) {
        sort(arr.begin(),arr.end());
        int d = arr[1] - arr[0];
        for(int i=1;i<arr.size()-1;i++){
            if(arr[i+1]-arr[i] != d){
                return false;
            }
        }
        return true;
    }
};

******************************************************************************************************************
**** 1318. Minimum Flips to Make a OR b Equal to c ( 07/06/23 ) ****

class Solution {
public:
    vector<int> decToBinary(int n)
{
    // array to store binary number
    vector<int> v(32,0);
 
    // counter for binary array
    int i = 0;
    while (n > 0) {
 
        // storing remainder in binary array
        v[i] = n % 2;
        n = n / 2;
        i++;
    }
 
    reverse(v.begin(),v.end());
        return v;
    
}
 
    
    int minFlips(int a, int b, int c) {
        vector<int> av = decToBinary(a);
        vector<int> bv = decToBinary(b);
        vector<int> cv = decToBinary(c);
        int ans=0;
        for(int i=0;i<32;i++){
            if(av[i]==0 && bv[i]==0){
                if(cv[i]==1){
                    ans++;
                }
            }
            else if(av[i]==1 && bv[i]==1){
                if(cv[i]==0){
                    ans++; ans++;
                }
            }
            else{
                if(cv[i]==0){
                    ans++;
                }
            }
        }
        return ans;
    }
};

************************************************************************************************************
**** 1351. Count Negative Numbers in a Sorted Matrix ( 08/06/23 ) ****

class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int ans=0,r=grid.size(),c=grid[0].size();
        for(int i=0;i<r;i++){
           for(int j=0;j<c;j++){
               if(grid[i][j] <0){
                    ans+=((c-j)*(r-i));
                   c=j;
                   break;
               }
           }
        }
        return ans;
    }
};

****************************************************************************************************************
**** 744. Find Smallest Letter Greater Than Target ( 09/06/23 ) ****

class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
    
        for(int i=0;i<letters.size();i++){
            
            if(int(letters[i] > int(target))){
                return letters[i];
            }
        }
        return letters[0];
    }
};

*******************************************************************************************************************
**** 1161. Maximum Level Sum of a Binary Tree ( 15/06/23 ) ****

class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        int ans=1,i=2,sum=0,maxi=root->val,count=0;
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        TreeNode* temp;
        while(!q.empty()){
            temp = q.front();
            q.pop();
            if(temp==NULL){
                count++;
                if(sum > maxi){
                    maxi = sum;
                    ans=i;
                    
                }
                i++;
                sum=0;
                if(!q.empty()){
                    q.push(NULL);
                }
            }
            else{
                if(temp->left){
                    q.push(temp->left);
                    sum+=temp->left->val;
                }
                if(temp->right){
                    q.push(temp->right);
                    sum+=temp->right->val;
                }
            }
            
        }
        if(ans > count){
            return count;
        }
        else{
            return ans;
        }
    }
};

***************************************************************************************************************************
**** 1732. Find the Highest Altitude ( 19/06/23 ) ****

class Solution {
public:
    int largestAltitude(vector<int>& gain) {
        int ans=0,p=0;
        for(int i=0;i<gain.size();i++){
            p+=gain[i];
            if(p>ans){
                ans=p;
            }
        }
           return ans; 
    }
};

*********************************************************************************************************
