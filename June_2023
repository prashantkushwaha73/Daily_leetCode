*************************************************************************************************
**** 1376. Time Needed to Inform All Employees ( 03/06/23 ) ****

class Solution {
public:
    int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
        unordered_map<int,vector<int> >m;
        for(int i=0;i<manager.size();i++) {
            m[manager[i]].push_back(i);
        }
        queue<pair<int,int>>q;
        q.push(make_pair(headID,0));
        int maxi=0;
        while(!q.empty()) {
            int n=q.size();
            for(int i=0;i<n;i++) {
                int head=q.front().first;
                int timeTaken=q.front().second;
                q.pop();
                int dur=informTime[head]+timeTaken;
                maxi=max(maxi,dur);
                for(auto it:m[head]) {
                    q.push(make_pair(it,dur));
                }
            }
        }
        return maxi;
    }
};

*********************************************************************************************
**** 547. Number of Provinces ( 04/06/23 ) ****

class Solution {
  private: void dfs(vector < vector < int >> & isConnected, vector < bool > & visited, int v, int n) {
    visited[v] = true;
    for (int i = 0; i < n; i++) {
      if (isConnected[v][i]) {
        if (visited[i]) {
          continue;
        }
        dfs(isConnected, visited, i, n);
      }
    }
  }
  public: int findCircleNum(vector < vector < int >> & isConnected) {
    int ans = 0, n = isConnected.size();
    vector < bool > visited(n, false);
    for (int i = 0; i < n; i++) {
      if (visited[i]) {
        continue;
      }
      ans++;
      dfs(isConnected, visited, i, n);
    }
    return ans;
  }
};

****************************************************************************************************
**** 1232. Check If It Is a Straight Line ( 05/06/23 ) ****

class Solution {
public:
    bool checkStraightLine(vector<vector<int>>& coordinates) {
        vector<vector<int>> v=coordinates;
        sort(v.begin(),v.end());
        int x1=v[0][0],y1=v[0][1],x2=v[v.size()-1][0],y2=v[v.size()-1][1];
        if(x2-x1 == 0){
            for(int i=1;i<v.size();i++){
                x1=v[i-1][0]; x2=v[i][0];
                if(x2-x1 != 0){
                    return false;
                }
            }
        }
        else{
        float slope = (y2-y1)/(x2-x1);
        for(int i=1;i<v.size();i++){
            x1=v[i-1][0]; y1=v[i-1][1]; x2=v[i][0]; y2=v[i][1];
            if(x2-x1 ==0){
                return false;
            }
            if((y2-y1)/(x2-x1) != slope){
                return false;
            }
        }
        }
        return true;
    }
};

***************************************************************************************************************
