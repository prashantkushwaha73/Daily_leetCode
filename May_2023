*********************************************************************
**** 1572. Matrix Diagonal Sum ****

class Solution {
public:
    int diagonalSum(vector<vector<int>>& mat) {
        int size=mat[0].size();
        int ans=0;
        for(int i=0;i<size;i++){
            ans+=mat[i][i];
            ans+=mat[i][size-i-1];
        }
        if(size%2!=0){
            ans-=mat[size/2][size/2];
        }
        return ans;
    }
};

*************************************************************************
**** 54. Spiral Matrix ( 9/5/23 ) ****

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int m= matrix.size();
        int n=matrix[0].size();
        int sc=0,ec=n-1,sr=0,er=m-1,count=0;
        while(count<=(m*n)-1){
            for(int index=sc; index<=ec && count<=(m*n)-1 ;index++){
                ans.push_back(matrix[sr][index]);
                count++;
            }
            sr++;
            
            for(int index=sr;index<=er && count<=(m*n)-1;index++){
                ans.push_back(matrix[index][ec]);
                count++;
            }
            ec--;
            
            for(int index=ec;index>=sc && count<=(m*n)-1;index--){
                ans.push_back(matrix[er][index]);
                count++;
            }
            er--;
            
            for(int index=er;index>=sr && count<=(m*n)-1;index--){
                ans.push_back(matrix[index][sc]);
                count++;
            }
            sc++;
            
        }
        return ans;
    }
};

*************************************************************************************************
**** 59. Spiral Matrix II ( 10/5/23 ) ****

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> ans;
        vector<int> store;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                store.push_back(0);
            }
            ans.push_back(store);
            store.clear();
        }
        
        int sc=0,ec=n-1,sr=0,er=n-1,count=1;
        while(count<=(n*n)){
            for(int index=sc; index<=ec && count<=(n*n) ;index++){
                ans[sr][index]=count;
                count++;
            }
            sr++;
            
            for(int index=sr;index<=er && count<=(n*n);index++){
                ans[index][ec]=count;
                count++;
            }
            ec--;
            
            for(int index=ec;index>=sc && count<=(n*n);index--){
                ans[er][index]=count;
                count++;
            }
            er--;
            
            for(int index=er;index>=sr && count<=(n*n);index--){
                ans[index][sc]=count;
                count++;
            }
            sc++;
            
        }
        return ans;
    }
};

***************************************************************************************************
**** 1721. Swapping Nodes in a Linked List ( 15/5/23 ) ****

class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        int count=0;
        ListNode* temp=head;
        while(temp){
            count++;
            temp=temp->next;
        }
        temp=head;
        ListNode* first=head;
        ListNode* second=head;
        for(int i=1;i<k;i++){
            first=first->next;
        }
        for(int i=0;i<count-k;i++){
            second=second->next;
        }
        swap(first->val,second->val);
        return head;
    }
};

**************************************************************************************************************
**** 934. Shortest Bridge ( 21/05/23 ) ****

class Solution {
public:
    int shortestBridge(vector<vector<int>>& grid) {
        int rows=grid.size(),cols=grid[0].size();
        map<pair<int,int>,bool> visited;
        queue<pair<int,int>> q;
         queue<pair<int,int>> store;
        bool check=false;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]){
                    visited[{i,j}]=true;
                    q.push({i,j});
                    store.push({i,j});
                
                    check=true;
                    break;
                }
            }
            if(check){
                break;
            }
        }
        pair<int,int> temp;
        int x,y;
        while(!store.empty()){
            temp=store.front();
            store.pop();
            x=temp.first; y=temp.second;
            if(x-1 >=0 && grid[x-1][y] && visited[{x-1,y}]==0){
                store.push({x-1,y});
                q.push({x-1,y});
                visited[{x-1,y}]=true;
            }
            if(x+1 < rows && grid[x+1][y] && visited[{x+1,y}]==0){
                store.push({x+1,y});
                q.push({x+1,y});
                visited[{x+1,y}]=true;
            }
            if(y-1 >=0 && grid[x][y-1] && visited[{x,y-1}]==0){
                store.push({x,y-1});
                q.push({x,y-1});
                visited[{x,y-1}]=true;
            }
            if(y+1 < cols && grid[x][y+1] && visited[{x,y+1}]==0){
                store.push({x,y+1});
                q.push({x,y+1});
                visited[{x,y+1}]=true;
            }
        }
        q.push({-1,-1});
        int ans=0;
        while(!q.empty()){
            temp=q.front();
            q.pop();
            if(temp.first==-1 && temp.second==-1){
                ans++;
                
                if(!q.empty()){
                    q.push({-1,-1});
                }
                else{
                    return ans;
                }
            }
            else{
            x=temp.first; y=temp.second;
                
            if(x-1 >=0){
                if(grid[x-1][y] && visited[{x-1,y}]==0){
                    return ans;
                }
                if(grid[x-1][y]==0){
                    grid[x-1][y]=1;
                    q.push({x-1,y});
                    visited[{x-1,y}]=true;
                }
            }
            if(x+1 < rows){
                if(grid[x+1][y] && visited[{x+1,y}]==0){
                    return ans;
                }
                if(grid[x+1][y]==0){
                    grid[x+1][y]=1;
                    q.push({x+1,y});
                    visited[{x+1,y}]=true;
                }
            }
            if(y-1 >=0){
                if(grid[x][y-1] && visited[{x,y-1}]==0){
                    return ans;
                }
                if(grid[x][y-1]==0){
                    grid[x][y-1]=1;
                    q.push({x,y-1});
                    visited[{x,y-1}]=true;
                }
            }
            if(y+1 < cols){
                if(grid[x][y+1] && visited[{x,y+1}]==0){
                    return ans;
                }
                if(grid[x][y+1]==0){
                    grid[x][y+1]=1;
                    q.push({x,y+1});
                    visited[{x,y+1}]=true;
                }
            }
        }
        }
        return ans;
    }
};

****************************************************************************************************************
****  Top K Frequent Elements ( 22/05/23 ) ****

class compare{
    public:
    bool operator()(pair<int,int> m1,pair<int,int> m2){
        return m1.second <= m2.second;
    }
};
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,compare> pq; 
        for(auto i=m.begin();i!=m.end();++i){
        pq.push({i->first,i->second});
    }
        vector<int> ans;
        for(int i=0;i<k;i++){
            ans.push_back(pq.top().first);
            pq.pop();
        }
        return ans;
    }
};

**********************************************************************************************************
