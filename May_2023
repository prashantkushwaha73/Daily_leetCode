*********************************************************************
**** 1572. Matrix Diagonal Sum ****

class Solution {
public:
    int diagonalSum(vector<vector<int>>& mat) {
        int size=mat[0].size();
        int ans=0;
        for(int i=0;i<size;i++){
            ans+=mat[i][i];
            ans+=mat[i][size-i-1];
        }
        if(size%2!=0){
            ans-=mat[size/2][size/2];
        }
        return ans;
    }
};

*************************************************************************
**** 54. Spiral Matrix ( 9/5/23 ) ****

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int m= matrix.size();
        int n=matrix[0].size();
        int sc=0,ec=n-1,sr=0,er=m-1,count=0;
        while(count<=(m*n)-1){
            for(int index=sc; index<=ec && count<=(m*n)-1 ;index++){
                ans.push_back(matrix[sr][index]);
                count++;
            }
            sr++;
            
            for(int index=sr;index<=er && count<=(m*n)-1;index++){
                ans.push_back(matrix[index][ec]);
                count++;
            }
            ec--;
            
            for(int index=ec;index>=sc && count<=(m*n)-1;index--){
                ans.push_back(matrix[er][index]);
                count++;
            }
            er--;
            
            for(int index=er;index>=sr && count<=(m*n)-1;index--){
                ans.push_back(matrix[index][sc]);
                count++;
            }
            sc++;
            
        }
        return ans;
    }
};

*************************************************************************************************
**** 59. Spiral Matrix II ( 10/5/23 ) ****

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> ans;
        vector<int> store;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                store.push_back(0);
            }
            ans.push_back(store);
            store.clear();
        }
        
        int sc=0,ec=n-1,sr=0,er=n-1,count=1;
        while(count<=(n*n)){
            for(int index=sc; index<=ec && count<=(n*n) ;index++){
                ans[sr][index]=count;
                count++;
            }
            sr++;
            
            for(int index=sr;index<=er && count<=(n*n);index++){
                ans[index][ec]=count;
                count++;
            }
            ec--;
            
            for(int index=ec;index>=sc && count<=(n*n);index--){
                ans[er][index]=count;
                count++;
            }
            er--;
            
            for(int index=er;index>=sr && count<=(n*n);index--){
                ans[index][sc]=count;
                count++;
            }
            sc++;
            
        }
        return ans;
    }
};

***************************************************************************************************
**** 1721. Swapping Nodes in a Linked List ( 15/5/23 ) ****

class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        int count=0;
        ListNode* temp=head;
        while(temp){
            count++;
            temp=temp->next;
        }
        temp=head;
        ListNode* first=head;
        ListNode* second=head;
        for(int i=1;i<k;i++){
            first=first->next;
        }
        for(int i=0;i<count-k;i++){
            second=second->next;
        }
        swap(first->val,second->val);
        return head;
    }
};

**************************************************************************************************************
