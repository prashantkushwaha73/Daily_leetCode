********************************************************************************************************************************
**** Reverse Prefix of Word ( 01/05/24 ) ****

class Solution {
public:
    string reversePrefix(string word, char ch) {
        for(int i=0;i<word.size();i++){
            if(word[i] == ch){
                string s = word.substr(0,i+1);
                reverse(s.begin(),s.end());
                return s + word.substr(i+1,word.size()-s.size()); 
            }
        }
        return word;
    }
};

***********************************************************************************************************************************
**** Largest Positive Integer That Exists With Its Negative ( 02/05/24 ) ****

class Solution {
public:
    int findMaxK(vector<int>& nums) {
        unordered_map<int,bool> m;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0){
                m[nums[i]]=true;
            }
        }
        int ans = -1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0 && nums[i]>ans && m[-(nums[i])]){
                ans =  nums[i];
            }
        }
        return ans;
    }
};

****************************************************************************************************************************************
**** Delete Node in a Linked List ( 05/05/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        int v = node->val;
        ListNode* temp = node;
        while(temp->next->next){
            temp->val = temp->next->val;
            temp = temp->next;
        }
        temp->val = temp->next->val;
        temp->next->val = v;
        temp->next = NULL;
    }
};

****************************************************************************************************************************************
**** Double a Number Represented as a Linked List ( 07/05/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* doubleIt(ListNode* head) {
        vector<int>  v;
        ListNode* temp = head;
        while(temp){
            v.push_back(temp->val);
            temp = temp->next;
        }
        vector<int> n;
        int carry = 0;
        for(int i=v.size()-1;i>=0;i--){
            n.push_back( (v[i]*2 + carry)%10 );
            carry = (v[i]*2 + carry)/10;
        }
        while(carry){
            n.push_back(carry%10);
            carry/=10;
        }
       // cout<<v<<endl;
        
        reverse(n.begin(),n.end());
      //  for(int i=0;i<n.size();i++){
       //     cout<<n[i]<<" ";
       // }
        
        if(n.size()){
            head = new ListNode(n[0]);
            temp = head;
        }
        ListNode* ln;
        for(int i=1;i<n.size();i++){
            ln = new ListNode(n[i]);
                temp->next = ln;
            temp = ln;
        }
        return head;
    }
};

****************************************************************************************************************************************
**** Relative Ranks ( 08/05/24 ) ****

class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& score) {
        priority_queue<int> pq;
        for(int i=0;i<score.size();i++){
            pq.push(score[i]);
        }
        int i=1;
        unordered_map<int,string> m;
        while(!pq.empty()){
            if(i==1){
                m[pq.top()] = "Gold Medal";
            }
            else if(i==2){
                m[pq.top()] = "Silver Medal";
            }
            else if(i==3){
                m[pq.top()] = "Bronze Medal";
            }
            else{
                m[pq.top()] = to_string(i);
            }
            i++; pq.pop();
        }
        vector<string> ans;
        for(int i=0;i<score.size();i++){
            ans.push_back(m[score[i]]);
        }
        return ans;
    }
};

*************************************************************************************************************************************
**** Maximize Happiness of Selected Children ( 09/05/24 ) ****

class Solution {
public:
    long long maximumHappinessSum(vector<int>& arr, int k) {
        priority_queue<int> pq;
        for(int i=0;i<arr.size();i++){
            pq.push(arr[i]);
        }
        int v = 0;
        long long ans = 0;
        while(k){
             if(pq.top()-v > 0){
                ans += (pq.top()-v);
             }
             v++;
             pq.pop();
             k--;
        }
        return ans;
    }
};

*********************************************************************************************************************************************
**** K-th Smallest Prime Fraction ( 10/05/24 ) ****

class Solution {
public:
 
    class Compare {
    public:
       bool operator()(pair<int,int> a, pair<int,int> b){
           if(float(a.first)/float(a.second) < float(b.first)/float(b.second)){
               return true;
           }
           return false;
      }
};

    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,Compare> pq;
        for(int i=0;i<arr.size();i++){
            for(int j=i+1;j<arr.size();j++){
                    pq.push({arr[i],arr[j]});     
            }
        } 
        int size = pq.size();
        for(int i=0;i<size-k;i++){
            pq.pop();
        }
        return {pq.top().first,pq.top().second};
    }
};

***************************************************************************************************************************************
**** Largest Local Values in a Matrix ( 12/05/24 ) ****

class Solution {
public:

    int solve(int x,int y,vector<vector<int>>& grid){
        int v = INT_MIN;
        for(int i=x-1;i<=x+1;i++){
            for(int j=y-1;j<=y+1;j++){
                v = max(v,grid[i][j]);
            }
        }
        return v;
    }

    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {
        int n = grid.size()-2;
        vector<vector<int>> ans;
        vector<int> p;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                 p.push_back(solve(i+1,j+1,grid));
            }
            ans.push_back(p);
            p.clear();
        }
        return ans;
     }
};

************************************************************************************************************************************
**** Evaluate Boolean Binary Tree ( 16/05/24 ) ****

class Solution {
public:
    bool solve(TreeNode* root){
        if(root->left==NULL && root->right==NULL){
            if(root->val==0){
                return false;
            }
            else{
                return true;
            }
        }
        if(root->val == 2){
            return solve(root->left)||solve(root->right);
        }
        return solve(root->left)&&solve(root->right);
    }
    bool evaluateTree(TreeNode* root) {
        return solve(root);
    }
};

*********************************************************************************************************************************************
**** Delete Leaves With a Given Value ( 17/05/24 ) ****

class Solution {
public:
    TreeNode* solve(TreeNode* root,int target){
        if(root->left){
            root->left = solve(root->left,target);
        }
        if(root->right){
            root->right = solve(root->right,target);
        }
        if(root->left==NULL && root->right==NULL && root->val==target){
            return NULL;
        }
        return root;
    }

    TreeNode* removeLeafNodes(TreeNode* root, int target) {
        return solve(root,target);
    }
};

**************************************************************************************************************************************************
**** Sum of All Subset XOR Totals ( 20/05/24 ) ****

class Solution {
public:
    void solve(int posi,int v,vector<int>& nums,int& ans){
        if(posi>=nums.size()){
            ans += v;
            return;
        }
        solve(posi+1,v,nums,ans);
        solve(posi+1,v^nums[posi],nums,ans);
    }
    int subsetXORSum(vector<int>& nums) {
        int ans = 0;
        for(int i=0;i<nums.size();i++){
            solve(i+1,nums[i],nums,ans);
        }
        return ans;
    }
};

******************************************************************************************************************************************************
**** Subsets ( 21/05/24 ) ****

class Solution {
public:
    void solve(int posi,vector<int> v,vector<int>& nums,vector<vector<int>>& ans){
        if(posi>=nums.size()){
            ans.push_back(v);
            return;
        }
        solve(posi+1,v,nums,ans);
        v.push_back(nums[posi]);
        solve(posi+1,v,nums,ans);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        solve(0,{},nums,ans);
        return ans;
    }
};

*******************************************************************************************************************************************************
**** Palindrome Partitioning ( 22/05/24 ) ****

class Solution {
  private: bool check(vector < string > s) {
    for (int p = 0; p < s.size(); p++) {
      string s1 = s[p];
      reverse(s[p].begin(), s[p].end());
      string s2 = s[p];
      if (s1 != s2) {
        return false;
      }
    }
    return true;
  }

  void solve(string s, vector < vector < string >> & ans, int n, vector < string > & store) {
    bool flag = 0;
    for (int p = 0; p < s.size(); p++) {
      string s1 = (s.substr(0, p + 1));
      string s2 = (s.substr(p + 1, n));
      store.push_back(s1);
      if (s2.size()) {
        solve(s2, ans, n, store);
      } else {
        flag = 1;
      }
      if (flag) {
        ans.push_back(store);
      }
      store.pop_back();
    }
  }
  public: vector < vector < string >> partition(string s) {

    int n = s.size();
    vector < vector < string >> ans;
    vector < string > store;
    if (s.size() == 1) {
      store.push_back(s);
      ans.push_back(store);
      return ans;
    }
    solve(s, ans, n, store);
    vector < vector < string >> answer;
    for (int i = 0; i < ans.size(); i++) {
      if (check(ans[i])) {
        answer.push_back(ans[i]);
      }
    }
    return answer;
  }
};

*************************************************************************************************************************************
**** The Number of Beautiful Subsets ( 23/05/24 ) ****

class Solution {
public:
    
    bool check(vector<int>& v,int& k){
        for(int i=0;i<v.size();i++){
             for(int j=0;j<v.size();j++){
                  if(i!=j && abs(v[i]-v[j])==k){
                    return false;
                  }
             }
        }
        return true;
    }

    void solve(int posi,vector<int>& v,int& k,vector<int>& nums,int& ans){
        if(posi >= nums.size()){
            if(check(v,k)){
                ans++;
            }
            return;
        }
        solve(posi+1,v,k,nums,ans);
        v.push_back(nums[posi]);
        solve(posi+1,v,k,nums,ans);
        v.pop_back();
    }

    int beautifulSubsets(vector<int>& nums, int k) {
        int ans = 0,posi;
        vector<int> v;
        for(int i=0;i<nums.size();i++){
            v.push_back(nums[i]);
            solve(i+1,v,k,nums,ans);
            v.pop_back();
        }
        return ans;
    }
};

*******************************************************************************************************************************************
**** Word Break II ( 25/05/24 ) ****

class Solution {
public:
    
    void solve(int posi,string str,string st,string s,unordered_map<string,bool>& m,vector<string>& ans){
        if(posi >= s.size()){
            if(m[st]){
                str+=st;
                ans.push_back(str);
            }
            return;
        }
        st.push_back(s[posi]);
        if(m[st]){
            solve(posi+1,str+st+" ","",s,m,ans);
        }
        solve(posi+1,str,st,s,m,ans);
    }

    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_map<string,bool> m;
        for(int i=0;i<wordDict.size();i++){
            m[wordDict[i]]=true;
        }
        vector<string> ans;
        solve(0,"","",s,m,ans);
        return ans;
    }
};

***********************************************************************************************************************************************
**** Get Equal Substrings Within Budget ( 28/05/24 ) ****

class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        vector<int> v;
        int ans = 0,i=0,j=0,count=abs(int(s[0])-int(t[0])),n=s.size();
        while(1){
            if(count<=maxCost){
                ans = max(ans,i-j+1);
            }
            if(i+1<n){
                if(count+abs(int(s[i+1])-int(t[i+1]))<=maxCost){
                    i++;
                    count+=abs(int(s[i])-int(t[i])); 
                }
                else if(j<i){
                     count-=abs(int(s[j])-int(t[j]));
                     j++;
                }
                else{
                    i++; j++;
                    count = abs(int(s[i])-int(t[i]));
                }
                
            }
            else{
                break;
            }
            
        }
        return ans;
    }
};

*******************************************************************************************************************************************
**** Number of Steps to Reduce a Number in Binary Representation to One ( 29/05/24 ) ****

class Solution {
public:
    
    bool check(string s){
        int count = 0;
        if(s[s.size()-1]=='0'){
            return false;
        }
        for(int i=s.size()-1;i>=0;i--){
            if(s[i]=='1'){
                count++;
                if(count>1){
                    return false;
                }
            }
        }
        return true;
    }

    string oddd(string s){
        bool flag = false;
        s[s.size()-1]='0';
        int posi = s.size()-2;
        while(posi>=0){
            if(s[posi]=='0'){
                s[posi]='1';
                flag = true;
                break;
            }
            else{
                s[posi]='0';
            }
            posi--;
        }
        if(flag){
            return s;
        }
        string p = s;
        s="1";
        s+=p;
        return s;
    }

    string evenn(string s){
        s.pop_back();
        string p = s;
        s="0";
        s+=p;
        return s;
    }    

    int numSteps(string s) {
        int ans = 0;
        while(!check(s)){
        
             ans++;
             if(s[s.size()-1]=='1'){
                s = oddd(s);
             }
             else{
                s = evenn(s);
             }
        }
        return ans;
    }
};

**********************************************************************************************************************************************
**** Single Number III ( 31/05/24 ) ****

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            if(i==0 && i+1<nums.size()){
                if(nums[i]!=nums[i+1]){
                    ans.push_back(nums[i]);
                }
            }
            else if(i==nums.size()-1 && i-1>=0){
                if(nums[i]!=nums[i-1]){
                    ans.push_back(nums[i]);
                }
            }
            else{
                if(nums[i]!=nums[i-1] && nums[i]!=nums[i+1]){
                    ans.push_back(nums[i]);
                }
            }
        }
        return ans;
    }
};

