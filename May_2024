********************************************************************************************************************************
**** Reverse Prefix of Word ( 01/05/24 ) ****

class Solution {
public:
    string reversePrefix(string word, char ch) {
        for(int i=0;i<word.size();i++){
            if(word[i] == ch){
                string s = word.substr(0,i+1);
                reverse(s.begin(),s.end());
                return s + word.substr(i+1,word.size()-s.size()); 
            }
        }
        return word;
    }
};

***********************************************************************************************************************************
**** Largest Positive Integer That Exists With Its Negative ( 02/05/24 ) ****

class Solution {
public:
    int findMaxK(vector<int>& nums) {
        unordered_map<int,bool> m;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0){
                m[nums[i]]=true;
            }
        }
        int ans = -1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>0 && nums[i]>ans && m[-(nums[i])]){
                ans =  nums[i];
            }
        }
        return ans;
    }
};

****************************************************************************************************************************************
**** Delete Node in a Linked List ( 05/05/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        int v = node->val;
        ListNode* temp = node;
        while(temp->next->next){
            temp->val = temp->next->val;
            temp = temp->next;
        }
        temp->val = temp->next->val;
        temp->next->val = v;
        temp->next = NULL;
    }
};

****************************************************************************************************************************************
**** Double a Number Represented as a Linked List ( 07/05/24 ) ****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* doubleIt(ListNode* head) {
        vector<int>  v;
        ListNode* temp = head;
        while(temp){
            v.push_back(temp->val);
            temp = temp->next;
        }
        vector<int> n;
        int carry = 0;
        for(int i=v.size()-1;i>=0;i--){
            n.push_back( (v[i]*2 + carry)%10 );
            carry = (v[i]*2 + carry)/10;
        }
        while(carry){
            n.push_back(carry%10);
            carry/=10;
        }
       // cout<<v<<endl;
        
        reverse(n.begin(),n.end());
      //  for(int i=0;i<n.size();i++){
       //     cout<<n[i]<<" ";
       // }
        
        if(n.size()){
            head = new ListNode(n[0]);
            temp = head;
        }
        ListNode* ln;
        for(int i=1;i<n.size();i++){
            ln = new ListNode(n[i]);
                temp->next = ln;
            temp = ln;
        }
        return head;
    }
};

****************************************************************************************************************************************
