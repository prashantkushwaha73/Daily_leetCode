*****************************************************************************
**** 557. Reverse Words in a String III ( 01/10/23 ) ****

class Solution {
public:

void reverse(string& str)
{
    int n = str.length();
 
    // Swap character starting from two
    // corners
    for (int i = 0; i < n / 2; i++)
        swap(str[i], str[n - i - 1]);
}

    string reverseWords(string s) {
        string str="";
        string ans="";
        string r;
        for(int i=0;i<s.size();i++){
           if(s[i]==' '){
         reverse(str);
           ans = ans + str;
           ans.push_back(' ');
           str="";
           }
           else{
               str.push_back(s[i]);
           }
        }
         reverse(str);
         ans = ans + str;
         
         return ans;
    }
};

*****************************************************************************************************
**** 2038. Remove Colored Pieces if Both Neighbors are the Same Color ( 02/10/23 ) ****

class Solution {
public:
   
    bool solve(string& s,bool& turn,int& a,int& b,int& size){
        if(turn){
              if(a >= size-1){
                  return !turn;
              }
        }
        else{
            if(b >= size-1){
                return !turn;
            }
        }
        
        while(1){
            if(turn){
                if(s[a-1]=='A' && s[a]=='A' && s[a+1]=='A'){
                    a+=1;
                    if(turn){
                        turn = false;
                    }
                    else{
                        turn = true;
                    }
                    return solve(s,turn,a,b,size);
                }
                else{
                  a+=1;
                  
                  return solve(s,turn,a,b,size);
                }
            }
            else{
               if(s[b-1]=='B' && s[b]=='B' && s[b+1]=='B'){
                    b+=1;
                    if(turn){
                        turn = false;
                    }
                    else{
                        turn = true;
                    }
                    return solve(s,turn,a,b,size);
                }
                else{
                  b+=1;
                  return solve(s,turn,a,b,size);
                }
            }
        }
        return !turn;
    }

    bool winnerOfGame(string colors) {
        bool turn = true;
        int a =1,b=1,size=colors.size();
        return solve(colors,turn,a,b,size);
    }
};

***********************************************************************************************************
**** 1512. Number of Good Pairs ( 03/10/23 ) ****

class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int ans = 0;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i]==nums[j]){
                    ans++;
                }
            }
        }
        return ans;
    }
};

**************************************************************************************************
**** 706. Design HashMap ( 04/10/23 ) ****

class MyHashMap {
public:
  int v[1000001];
    MyHashMap() {
        fill(v,v+1000000,-1);
    }
    
    void put(int key, int value) {
        v[key] = value;
    }
    
    int get(int key) {
        return v[key];
    }
    
    void remove(int key) {
        v[key] = -1;
    }
};

***************************************************************************************************
**** 229. Majority Element II ( 05/10/23 ) ****

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        vector<int> ans;
        for(auto i:m){
            if(i.second > nums.size()/3){
                ans.push_back(i.first);
            }
        }
        return ans;
    }
};

**************************************************************************************************
**** 34. Find First and Last Position of Element in Sorted Array ( 09/10/23 ) ****

class Solution {
    int first(vector<int>& nums,int v){
        int s = 0,e = nums.size()-1;
        int mid ;
        while(s <= e){
          mid = s+(e-s)/2;
          if(nums[mid] == v){
               if(s+1==e){
                  return s;
              }
              e = mid;
              if(s==e){
                  return s;
              }
             
          }
          else if(nums[mid] > v){
              e = mid-1;
          }
          else{
              s = mid+1;
          }
        }
        return -1;
    }

    int last(vector<int>& nums,int v){
        int s = 0,e = nums.size()-1;
        int mid ;
        while(s <= e){
          mid = s+(e-s)/2;
          if(nums[mid] == v){
              if(s+1 == e){
                  if(nums[e]==v){
                      return e;
                  }
                  else{
                      return s;
                  }
              }
              s = mid;
              if(s==e){
                  return e;
              }
        
          }
          else if(nums[mid] > v){
              e = mid-1;
          }
          else{
              s = mid+1;
          }
        }
        return -1;
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        ans.push_back(first(nums,target));
        ans.push_back(last(nums,target));
        return ans;
    }
};

********************************************************************************************
****  1095. Find in Mountain Array ( 12/10/23 ) ****

class Solution {
  int peak(MountainArray& mountainArr){
      int size = mountainArr.length();
      int s = 0, e = size-1;
      int mid;
      while(s<e){
          mid = s+(e-s)/2;
          if(mountainArr.get(mid) < mountainArr.get(mid+1)){
              s = mid+1;
          }
          else{
              e = mid;
          }
      }
      return s;
  }
  int left(int s,int e,int target,MountainArray& mountainArr){
         int mid;
         while(s<e){
             mid = s+(e-s)/2;
             if(mountainArr.get(mid) == target){
                 return mid;
             }
             else if(mountainArr.get(mid)>target){
                 e = mid-1;
             }
             else{
                 s = mid+1;
             }
         }
         if(mountainArr.get(s) == target){
             return s;
         }
         return -1;
  }

  int right(int s,int e,int target,MountainArray& mountainArr){
    int mid;
         while(s<e){
             mid = s+(e-s)/2;
             if(mountainArr.get(mid) == target){
                 return mid;
             }
             else if(mountainArr.get(mid)>target){
                 s = mid+1;
             }
             else{
                 e = mid-1;
             }
         }
         if(mountainArr.get(s) == target){
             return s;
         }
         return -1;
  }
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int p = peak(mountainArr);
        if(left(0,p,target,mountainArr) != -1){
            return left(0,p,target,mountainArr);
        }
        if(right(p+1,mountainArr.length()-1,target,mountainArr) != -1){
            return right(p+1,mountainArr.length()-1,target,mountainArr);
        }
        return -1;
    }
};

********************************************************************************************
**** 746. Min Cost Climbing Stairs ( 13/10/23 ) ****

class Solution {
public:
    int solve(vector<int>& cost,int i,vector<int>& dp){
        if(i>=cost.size()){
            return 0;
        }
        if(dp[i] != -1){
            return dp[i];
        }
       return dp[i] = min(cost[i] + solve(cost,i+1,dp),cost[i] + solve(cost,i+2,dp));
    }
   
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size(),-1);
        return min(min(cost[0] + solve(cost,1,dp),cost[0] + solve(cost,2,dp)),min(cost[1] + solve(cost,2,dp),cost[1] + solve(cost,3,dp)));
    }
};

*******************************************************************************************************
**** 1269. Number of Ways to Stay in the Same Place After Some Steps ( 15/10/23 ) ****

class Solution {
public:
    int solve(int count,int steps,int size,int posi,vector<vector<int>>& dp){
        if(posi == 0 && count == steps){
            return 1;
        }
        if(count==steps){
            return 0;
        }
        if(dp[posi][count] != -1){
            return dp[posi][count];
        }
        dp[posi][count] = 0;
        if(count < steps && posi >0){
            dp[posi][count] = dp[posi][count]%1000000007 + solve(count+1,steps,size,posi-1,dp)%1000000007;
        }
        if(count < steps && posi < size-1){
            dp[posi][count] = dp[posi][count]%1000000007 + solve(count+1,steps,size,posi+1,dp)%1000000007;
        }
        if(count < steps){
            dp[posi][count] = dp[posi][count]%1000000007 + solve(count+1,steps,size,posi,dp)%1000000007;
        }
        return dp[posi][count]%1000000007;
    }
    int numWays(int steps, int arrLen) {
        vector<vector<int>> dp(600,vector<int> (steps+1,-1));
        return solve(0,steps,arrLen,0,dp);
    }
};

***************************************************************************************************************
**** 119. Pascal's Triangle II ( 16/10/23 ) ****

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> v1;
        vector<int> v2;
        v1.push_back(1);
        while(rowIndex){
            rowIndex--;
            v2.push_back(1);
            for(int i=0;i<v1.size()-1;i++){
                v2.push_back(v1[i]+v1[i+1]);
            }
            v2.push_back(1);
            v1 = v2;
            v2.clear();
        }
        return v1;
    }
};

*******************************************************************************************************************
**** Level of Nodes ( 19/10/23 ) ****

class Solution
{
	public:
	int nodeLevel(int V, vector<int> adj[], int X) 
	{
	    if(X==0){
	        return 0;
	    }
	    queue<pair<int,int>> q;
	    vector<bool> visited(V,false);
	    q.push({0,0});
	    visited[0] = true;
	    pair<int,int> p;
	    while(!q.empty()){
	        for(int i=0;i<q.size();i++){
	            p = q.front();
	            q.pop();
	            for(int j=0;j<adj[p.first].size();j++){
	                if(adj[p.first][j] == X){
	                    return p.second+1;
	                }
	                if(visited[adj[p.first][j]] == false){
	                    visited[adj[p.first][j]] = true;
	                    q.push({adj[p.first][j],p.second+1});
	                }
	            }
	        }
	    }
	    return -1;
	}
};

************************************************************************************************************
**** 342. Power of Four ( 23/10/23 ) ****

class Solution {
public:
    bool isPowerOfFour(int n) {
        if(n<=0){
            return false;
        }
        if(float( (log2(n))/2) - int((log2(n))/2) > 0){
            return false;
        }
        return true;
    }
};

*******************************************************************************************************
**** 515. Find Largest Value in Each Tree Row ( 24/10/23 ) ****

class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        if(root == NULL){
            return {};
        }
        queue<TreeNode*> q;
        q.push(root);
        int data,n;
        vector<int> ans;
        while(!q.empty()){
            data = INT_MIN;
            n=q.size();
            for(int i=0;i<n;i++){
                 data = max(data,q.front()->val);
                 if(q.front()->left){
                     q.push(q.front()->left);
                 }
                 if(q.front()->right){
                     q.push(q.front()->right);
                 }
                 q.pop();
            }
           ans.push_back(data);
        }
        return ans;
    }
};


****************************************************************************************************
**** 779. K-th Symbol in Grammar ( 25/10/23 ) ****

class Solution {
public:
    int kthGrammar(int n, int k) {
        vector<int> v;
        v.push_back(k);
        while(n>1){
            if(k%2){
               k = (k+1)/2;
               v.push_back(k);
            }
            else{
                k = k/2;
                v.push_back(k);
            }
            n--;
        }
        reverse(v.begin(),v.end());
        int a = 0, b= 1,ans=0;
        for(int i =1 ;i<v.size();i++){
            if(v[i]%2){
                ans = a;
                if(ans == 0){
                    a = 0; b = 1;
                }
                else{
                    a = 1; b = 0;
                }
            }
            else{
                ans = b;
                if(ans == 0){
                    a = 0; b = 1;
                }
                else{
                    a = 1; b = 0;
                }
            }
        }
        return ans;
    }
};

**********************************************************************************
**** 823. Binary Trees With Factors ( 26/10/23 ) ****

class Solution {
public:
   long long int mod = 1e9+7;
    
     long long int solve(unordered_map<int,int>& dp,unordered_map<int,bool>& dpc,unordered_map<int,int>& posi,unordered_map<int,bool>& check,vector<int>& arr,int value){
         if(dpc[value]){
             return dp[value];
         }
         long long int v = 0;
         for(int i=0;i<posi[value];i++){
             if( value%arr[i] == 0  && check[value/arr[i]]){
                 v = v%mod + (solve(dp,dpc,posi,check,arr,arr[i])%mod * solve(dp,dpc,posi,check,arr,int(value/arr[i]))%mod);
             }
         }
         dpc[value] = true;
         return dp[value] = (1+v)%mod;
     }
  
    int numFactoredBinaryTrees(vector<int>& arr) {
        sort(arr.begin(),arr.end());
        unordered_map<int,int> dp;
        unordered_map<int,bool> dpc;
        unordered_map<int,int> posi;
        unordered_map<int,bool> check;
        for(int i=0;i<arr.size();i++){
            check[arr[i]] = true;
            posi[arr[i]] = i;
        }
        long long int ans = 0;
        for(int i=0;i<arr.size();i++){
            ans = ans%mod + (solve(dp,dpc,posi,check,arr,arr[i])%mod);
        }
        return ans%mod;
    }
};

*******************************************************************************************************
**** 1220. Count Vowels Permutation ( 28/10/23 ) ****

class Solution {
public:

   int mod = 1e9+7;

     int solve(unordered_map<char,vector<int>>& dp,char v,int n){
         if(n == 0){
             return 1;
         }
         if(v == 'a'){
             if(dp['a'][n] != -1){
                 return dp['a'][n]%mod;
             }
             return dp['a'][n] = solve(dp,'e',n-1)%mod;
         }
         else if(v == 'e'){
             if(dp['e'][n] != -1){
                 return dp['e'][n]%mod;
             }
             int sum = 0;
             sum = sum%mod + solve(dp,'a',n-1)%mod;
             sum = sum%mod + solve(dp,'i',n-1)%mod;
             return dp['e'][n] = sum%mod;
         }
         else if(v == 'i'){
              if(dp['i'][n] != -1){
                 return dp['i'][n]%mod;
             }
             int sum = 0;
             sum = sum%mod + solve(dp,'a',n-1)%mod;
             sum = sum%mod + solve(dp,'e',n-1)%mod;
             sum = sum%mod + solve(dp,'o',n-1)%mod;
             sum = sum%mod + solve(dp,'u',n-1)%mod;
             return dp['i'][n] = sum%mod;
         }
         else if(v == 'o'){
              if(dp['o'][n] != -1){
                 return dp['o'][n]%mod;
             }
             int sum = 0;
             sum = sum%mod + solve(dp,'i',n-1)%mod;
             sum = sum%mod + solve(dp,'u',n-1)%mod;
             return dp['o'][n] = sum%mod;
         }
         else{
              if(dp['u'][n] != -1){
                 return dp['u'][n]%mod;
             }
             return dp['u'][n] = solve(dp,'a',n-1)%mod;
         }
     }

    int countVowelPermutation(int n) {
        unordered_map<char,vector<int>> dp;
        dp['a'] = vector<int> (n,-1);
        dp['e'] = vector<int> (n,-1);
        dp['i'] = vector<int> (n,-1);
        dp['o'] = vector<int> (n,-1);
        dp['u'] = vector<int> (n,-1);
        int ans = 0;
        ans = ans%mod + solve(dp,'a',n-1)%mod;
        ans = ans%mod + solve(dp,'e',n-1)%mod;
        ans = ans%mod + solve(dp,'i',n-1)%mod;
        ans = ans%mod + solve(dp,'o',n-1)%mod;
        ans = ans%mod + solve(dp,'u',n-1)%mod;
        return ans%mod;
    }
};

********************************************************************************************
**** 1356. Sort Integers by The Number of 1 Bits ( 30/10/23 ) ****

class Solution {
public:
  
    int solve(int n){
        int count= 0;
        while(n){
            if(n%2==1){
                count++;
            }
            n/=2;
        }
        return count;
    }

    vector<int> sortByBits(vector<int>& arr) {
        priority_queue<pair<int,int>> pq;
        for(int i=0;i<arr.size();i++){
            pq.push({solve(arr[i]),arr[i]});
        }
        for(int i=0;i<arr.size();i++){
            arr[arr.size()-1-i] = pq.top().second;
            pq.pop();
        }
         return arr;
    }
};

*********************************************************************************************
