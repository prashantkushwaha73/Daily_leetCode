**************************************************************************************************************************************
**** Length of Last Word ( 01/04/24 ) ****

class Solution {
public:
    int lengthOfLastWord(string s) {
         for(int j=s.size()-1;j>=0;j--){
        if(isspace(s[j])){
            s.pop_back();
        }
        else{
            break;
        }
    }
   s.push_back(' ');
  //  cout<<s.size()<<endl;
   // cout<<s<<endl;
     int ans=0;
        int count=0;
        for(int i=0;i<s.size();i++){
            if(isspace(s[i])){
                ans=count;
                count =0;
                continue;
            }
            else{
                count++;
            }
            
        }
      return ans;

    }
};

******************************************************************************************************************************************
**** Isomorphic Strings ( 02/04/24 ) ****

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        unordered_map<char,bool> check;
        unordered_map<char,char> m;
        unordered_map<char,bool> check2;
        unordered_map<char,char> m2;
        for(int i=0;i<s.size();i++){
            if(check[s[i]] && m[s[i]]!=t[i]){
                 return false;
            }
            else{
                if(check2[t[i]] && m2[t[i]]!=s[i]){
                    return false;
                }
                m[s[i]]=t[i];
                check[s[i]]=true;
                check2[t[i]]=true;
                m2[t[i]]=s[i];
            }
        }
        return true;
    }
};

******************************************************************************************************************************************
**** Word Search ( 03/04/24 ) ****

class Solution {
public:
   
    void solve(vector<vector<char>>& board,int i,int j,string& word,int posi,bool& ans,map<pair<int,int>,bool>& visited){
         if(posi==word.size()){
            ans = true;
            return;
         }
         //// right
         if(j+1<board[0].size() && board[i][j+1]==word[posi] && visited[{i,j+1}]==false){
            visited[{i,j+1}]=true;
            solve(board,i,j+1,word,posi+1,ans,visited);
            visited[{i,j+1}]=false;
         }
         //// left
          if(j-1>=0 && board[i][j-1]==word[posi] && visited[{i,j-1}]==false){
            visited[{i,j-1}]=true;
            solve(board,i,j-1,word,posi+1,ans,visited);
            visited[{i,j-1}]=false;
         }
         //// down
          if(i+1<board.size() && board[i+1][j]==word[posi] && visited[{i+1,j}]==false){
            visited[{i+1,j}]=true;
            solve(board,i+1,j,word,posi+1,ans,visited);
            visited[{i+1,j}]=false;
         }
         //// up
          if(i-1>=0 && board[i-1][j]==word[posi] && visited[{i-1,j}]==false){
            visited[{i-1,j}]=true;
            solve(board,i-1,j,word,posi+1,ans,visited);
            visited[{i-1,j}]=false;
          }
    }

    bool exist(vector<vector<char>>& board, string word) {
        map<pair<int,int>,bool> visited;
        bool ans = false;
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]==word[0]){
                    visited[{i,j}]=true;
                    solve(board,i,j,word,1,ans,visited);
                    visited[{i,j}]=false;
                }
            }
        }
        return ans;
    }
};

********************************************************************************************************************
**** Make The String Great ( 05/04/24 ) ****

class Solution {
public:
    string makeGood(string s) {
        int size=s.size(),j=0;
        if(size==1){
            return s;
        }
        for(int i=0;i<size-1;i++){
            j=i+1;
            if( ((s[i]-'a'>=0&&s[i]-'a'<=25)&&(s[j]-'A'>=0&&s[j]-'A'<=25))||((s[i]-'A'>=0&&s[i]-'A'<=25)&&(s[j]-'a'>=0&&s[j]-'a'<=25))){
            if(  (char)toupper(s[i]) ==  (char)toupper(s[j])  ){
                s.erase(s.begin()+i);
                i--;
                j--;
                s.erase(s.begin()+j);
            
                size--;
                size--;
            }
               if(size==0 || size==1){
                   break;
               } 
                if(i < 0){
                   continue;
               }
            if((((s[i]-'a'>=0&&s[i]-'a'<=25)&&(s[j]-'A'>=0&&s[j]-'A'<=25))||((s[i]-'A'>=0&&s[i]-'A'<=25)&&(s[j]-'a'>=0&&s[j]-'a'<=25))) && (  (char)toupper(s[i]) ==  (char)toupper(s[j])  )){
                i--;
            }
            }
        }
        return s;
    }
};

************************************************************************************************************************************
**** Number of Students Unable to Eat Lunch ( 08/04/24 ) ****

class Solution {
public:
    int countStudents(vector<int>& students, vector<int>& sandwiches) {
        int bzero=0,bone=0,szero=0,sone=0,n=students.size();
         stack<int> s;
        queue<int> b;
        for(int i=0;i<n;i++){
            b.push(students[i]);
            s.push(sandwiches[n-(i+1)]);
            if(students[i]==0){
                bzero++;
            }
            else{
                bone++;
            }
            if(sandwiches[i]==0){
                szero++;
            }
            else{
                sone++;
            }
        }
        while(!b.empty()){
            if(s.top()==0 && bzero==0){
                 return b.size();
            }
            if(s.top()==1 && bone==0){
                return b.size();
            }
            if(b.front() == s.top()){
                cout<<b.front()<<" "<<s.top()<<endl;
                if(b.front()==0){
                    bzero--;
                    szero--;
                    s.pop();
                    b.pop();
                
                }
                else{
                    bone--;
                    sone--;
                    s.pop();
                    b.pop();
                }
            }
            else{
                b.push(b.front());
                b.pop();
            }
        }
        return b.size();
    }
};

*******************************************************************************************************************
**** Time Needed to Buy Tickets ( 09/04/24 ) ****

class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
        int ans = 0;
        while(tickets[k]){
            for(int i=0;i<tickets.size();i++){
                if(tickets[i]){
                    ans++;
                    tickets[i]--;
                }
                if(tickets[k]==0){
                    return ans;
                }
            }
        }
        return ans;
    }
};

*********************************************************************************************************************************
**** 129. Sum Root to Leaf Numbers ( 15/04/24 ) ****

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void solve(TreeNode* root,int& n,int& ans){
        if(root==NULL){
            return;
        }
         n=(n*10)+root->val; 
        solve(root->left,n,ans);
        solve(root->right,n,ans);
        if(root->left==NULL && root->right==NULL){
        ans+=n; }
        n/=10;
    }
public:
    int sumNumbers(TreeNode* root) {
        int ans=0;
        int n=0;
        solve(root,n,ans);
        return ans;
    }
};

*****************************************************************************************************************
**** 623. Add One Row to Tree ( 16/04/24 ) ****

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void solve(TreeNode* root,int count,int depth,int val){
        if(root==NULL){
            return;
        }
        if(count==depth-1){
            TreeNode* a = new TreeNode(val);
            TreeNode* b = new TreeNode(val);
            a->left = root->left;
            b->right = root->right;
            root->left = a;
            root->right = b;
            return;
        }
        solve(root->left,count+1,depth,val);
        solve(root->right,count+1,depth,val);
    }
   
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth==1){
            TreeNode* ans = new TreeNode(val);
            ans->left = root;
            return ans;
        }
        if(root!=NULL){
            solve(root,1,depth,val);
        }
        return root;
    }
};

***************************************************************************************************************************
**** Find if Path Exists in Graph ( 21/04/24 ) ****

class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if(source==destination){
            return true;
        }
        map<int,list<int>> store;
        for(auto i:edges){
            int u,v;
            u=i[0];
            v=i[1];
            store[u].push_back(v);
            store[v].push_back(u);
        }
        queue<int> q;
        vector<bool> visited(n,false);
        q.push(source);
        visited[source]=true;
        while(!q.empty()){
            int temp=q.front();
            q.pop();
            for(auto i:store[temp]){
                if(visited[i]==false){
                    if(i==destination){
                        return true;
                    }
                    q.push(i);
                    visited[i]=true;
                }
            }
        }
        return false;
    }
};

*******************************************************************************************************************************
**** N-th Tribonacci Number ( 24/04/24 ) ****

class Solution {
public:
    int solve(int a,int b,int c,int n){
        int d;
        for(int i=3;i<=n;i++){
             d=a+b+c;
           a=b;b=c;c=d;
        }
        return d;
    }
    
public:
    int tribonacci(int n) {
        if(n<=0)
            return 0;
        
        if(n==1)
            return 1;
        
        if(n==2)
            return 1;
        
        int a=0,b=1,c=1;
        return solve(a,b,c,n);
    }
};

**************************************************************************************************************************************
