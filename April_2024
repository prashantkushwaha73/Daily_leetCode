**************************************************************************************************************************************
**** Length of Last Word ( 01/04/24 ) ****

class Solution {
public:
    int lengthOfLastWord(string s) {
         for(int j=s.size()-1;j>=0;j--){
        if(isspace(s[j])){
            s.pop_back();
        }
        else{
            break;
        }
    }
   s.push_back(' ');
  //  cout<<s.size()<<endl;
   // cout<<s<<endl;
     int ans=0;
        int count=0;
        for(int i=0;i<s.size();i++){
            if(isspace(s[i])){
                ans=count;
                count =0;
                continue;
            }
            else{
                count++;
            }
            
        }
      return ans;

    }
};

******************************************************************************************************************************************
**** Isomorphic Strings ( 02/04/24 ) ****

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        unordered_map<char,bool> check;
        unordered_map<char,char> m;
        unordered_map<char,bool> check2;
        unordered_map<char,char> m2;
        for(int i=0;i<s.size();i++){
            if(check[s[i]] && m[s[i]]!=t[i]){
                 return false;
            }
            else{
                if(check2[t[i]] && m2[t[i]]!=s[i]){
                    return false;
                }
                m[s[i]]=t[i];
                check[s[i]]=true;
                check2[t[i]]=true;
                m2[t[i]]=s[i];
            }
        }
        return true;
    }
};

******************************************************************************************************************************************
**** Word Search ( 03/04/24 ) ****

class Solution {
public:
   
    void solve(vector<vector<char>>& board,int i,int j,string& word,int posi,bool& ans,map<pair<int,int>,bool>& visited){
         if(posi==word.size()){
            ans = true;
            return;
         }
         //// right
         if(j+1<board[0].size() && board[i][j+1]==word[posi] && visited[{i,j+1}]==false){
            visited[{i,j+1}]=true;
            solve(board,i,j+1,word,posi+1,ans,visited);
            visited[{i,j+1}]=false;
         }
         //// left
          if(j-1>=0 && board[i][j-1]==word[posi] && visited[{i,j-1}]==false){
            visited[{i,j-1}]=true;
            solve(board,i,j-1,word,posi+1,ans,visited);
            visited[{i,j-1}]=false;
         }
         //// down
          if(i+1<board.size() && board[i+1][j]==word[posi] && visited[{i+1,j}]==false){
            visited[{i+1,j}]=true;
            solve(board,i+1,j,word,posi+1,ans,visited);
            visited[{i+1,j}]=false;
         }
         //// up
          if(i-1>=0 && board[i-1][j]==word[posi] && visited[{i-1,j}]==false){
            visited[{i-1,j}]=true;
            solve(board,i-1,j,word,posi+1,ans,visited);
            visited[{i-1,j}]=false;
          }
    }

    bool exist(vector<vector<char>>& board, string word) {
        map<pair<int,int>,bool> visited;
        bool ans = false;
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]==word[0]){
                    visited[{i,j}]=true;
                    solve(board,i,j,word,1,ans,visited);
                    visited[{i,j}]=false;
                }
            }
        }
        return ans;
    }
};

********************************************************************************************************************
**** Make The String Great ( 05/04/24 ) ****

class Solution {
public:
    string makeGood(string s) {
        int size=s.size(),j=0;
        if(size==1){
            return s;
        }
        for(int i=0;i<size-1;i++){
            j=i+1;
            if( ((s[i]-'a'>=0&&s[i]-'a'<=25)&&(s[j]-'A'>=0&&s[j]-'A'<=25))||((s[i]-'A'>=0&&s[i]-'A'<=25)&&(s[j]-'a'>=0&&s[j]-'a'<=25))){
            if(  (char)toupper(s[i]) ==  (char)toupper(s[j])  ){
                s.erase(s.begin()+i);
                i--;
                j--;
                s.erase(s.begin()+j);
            
                size--;
                size--;
            }
               if(size==0 || size==1){
                   break;
               } 
                if(i < 0){
                   continue;
               }
            if((((s[i]-'a'>=0&&s[i]-'a'<=25)&&(s[j]-'A'>=0&&s[j]-'A'<=25))||((s[i]-'A'>=0&&s[i]-'A'<=25)&&(s[j]-'a'>=0&&s[j]-'a'<=25))) && (  (char)toupper(s[i]) ==  (char)toupper(s[j])  )){
                i--;
            }
            }
        }
        return s;
    }
};

********************************************************************************************************************************
