***********************************************************************************
**** 77. Combinations ( 01/08/23 ) ****

class Solution {
public:
    
    void solve(vector<vector<int>>& ans,int index,vector<int>& v,int k,vector<int>& store){
        store.push_back(v[index]);
        if(store.size() == k){
            ans.push_back(store);
            store.pop_back();
            return;
        }
        while(index+1 < v.size()){
            index+=1;
            solve(ans,index,v,k,store);
        }
        store.pop_back();
    }
    
    vector<vector<int>> combine(int n, int k) {
        vector<int> v;
        for(int i=1;i<=n;i++){
            v.push_back(i);
            }
        vector<vector<int>> ans;
        vector<int> store;
        for(int i=0;i<n;i++){
        solve(ans,i,v,k,store);
        }
        return ans;
    }
};

***********************************************************************************************************
**** 46. Permutations ( 02/08/23 ) ****

class Solution {
private:
    void solve(vector<int>& nums,vector<vector<int>>& ans,int index){
        if(index>=nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int i=index;i<nums.size();i++){
            swap(nums[index],nums[i]);
            solve(nums,ans,index+1);
            swap(nums[i],nums[index]);
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int index=0;
        solve(nums,ans,index);
        return ans;
    }
};

****************************************************************************************************
**** 17. Letter Combinations of a Phone Number ( 03/08/23 ) ****

class Solution {
private:
    void solve(string digits,vector<string>& ans,string output,int index,string mapping[]){
        if(index>=digits.length()){
            ans.push_back(output);
            return;
        }
        int n=digits[index]-'0';
        string letters=mapping[n];
        for(int i=0;i<letters.length();i++){
            output.push_back(letters[i]);
            solve(digits,ans,output,index+1,mapping);
            output.pop_back();
}
}
public:
    vector<string> letterCombinations(string digits) {
       
        vector<string> ans;
         if(digits.length()==0){
            return ans;
        }
        string output="";
        int index=0;
        string mapping[]={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        solve(digits,ans,output,index,mapping);
        return ans;
    }
};

***********************************************************************************************************
**** 74. Search a 2D Matrix ( 07/08/23 ) ****

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int i = 0,j = 0;
        while(i+1 < matrix.size() && matrix[i+1][j] <= target){
            i++;
        }
        for(int p=0;p<matrix[0].size();p++){
            if(matrix[i][p] == target){
                return true;
            }
        }
        return false;
    }
};

******************************************************************************************************
**** 81. Search in Rotated Sorted Array II ( 10/08/23 ) ****

class Solution {
public:
   int search(vector<int>& v, int tar) {
       vector<int> nums;
       unordered_map<int,int> m;
       for(int i=0;i<v.size();i++){
           if(m[v[i]]==false){
               m[v[i]]=true;
               nums.push_back(v[i]);
           }
       }
        int l=0;
        int h=nums.size()-1;
        int mid=0;
        while(h-l>1){
            mid=(l+h)/2;
            if(nums[mid]==tar) return true;
            if(nums[l]>nums[mid] && nums[mid]<nums[h]){
                if(tar<=nums[h] && tar>nums[mid]) l=mid+1;
                else h=mid-1;
            }
            else if(nums[mid]>nums[l] && nums[mid]>nums[h]){
                if(tar>=nums[l] && tar<nums[mid]) h=mid-1;
                else l=mid+1;
            }
            else{
                if(tar>nums[mid]) l=mid+1;
                else h=mid-1;
            }
        }
        if(nums[l]==tar) return true;
        if(nums[h]==tar) return true;
        return false;
    }
};

****************************************************************************************************
**** 215. Kth Largest Element in an Array ( 14/08/23 ) ****

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>> pq;
        for(int i=0;i<k;i++){
            pq.push(nums[i]);
        }
        for(int i=k;i<nums.size();i++){
            if(nums[i]>pq.top()){
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
    }
};

****************************************************************************************
