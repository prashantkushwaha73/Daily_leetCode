***************************************************************************************************************************************
**** Score of a String ( 01/06/24 ) ****

class Solution {
public:
    int scoreOfString(string s) {
        int ans = 0;
        for(int i=1;i<s.size();i++){
           int a = s[i]; int b = s[i-1];
             if(a>b){
                ans += a-b;
             }
             else{
                ans += b-a;
             }
        }
        return ans;
    }
};

********************************************************************************************************************************************
**** Reverse String ( 02/06/24 ) ****

class Solution {
public:
    void reverseString(vector<char>& s) {
        int size=s.size();
        int b=0 , e=size-1;
        while(b<e){
            swap(s[b],s[e]);
            b++;
            e--;
        }
    }
};

*************************************************************************************************************************************************
**** Append Characters to String to Make Subsequence ( 03/06/24 ) ****

class Solution {
public:
    int appendCharacters(string s, string t) {
        int i=0,j=0;
        while(i<s.size() && j<t.size()){
            if(s[i]==t[j]){
                i++;
                j++;
            }
            else{
                i++;
            }
        }
        return t.size()-j;
    }
};

****************************************************************************************************************************************************
**** Longest Palindrome ( 04/06/24 ) ****

class Solution {
public:
    int longestPalindrome(string s) {
        int ans = 0;
        unordered_map<char,int> m;;
        for(int i=0;i<s.size();i++){
            m[s[i]]++;
        }
        priority_queue<int> pq;
        for(auto i:m){
            if(i.second%2){
                pq.push(i.second);
            }
            else{
                ans+=i.second;
            }
        }
        if(!pq.empty()){
             ans+=pq.top();
        pq.pop();
        }
        while(!pq.empty()){
            ans += pq.top()-1;
            pq.pop();
        }
       return ans;
    }
};

************************************************************************************************************************************************
**** Find Common Characters ( 05/06/24 ) ****

class Solution {
public:
   
    bool solve(char c,vector<vector<int>>& v){
          for(int i=1;i<v.size();i++){
              if(v[i][c-'a']){
                v[i][c-'a']--;
              }
              else{
                return false;
              }
          }
          return true;
    }
    
    vector<string> commonChars(vector<string>& words) {
        int n = words.size();
        vector<vector<int>> v(n,vector<int> (26,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<words[i].size();j++){
                v[i][words[i][j]-'a']++;
            }
        }
        vector<string> ans;
        string s = words[0],r;
        char c;
        for(int i=0;i<s.size();i++){
            c=s[i];
             if(solve(c,v)){
                r="";
                r.push_back(c);
                ans.push_back(r);
             }
        }
        return ans;
    }
};

*************************************************************************************************************************************************
**** Replace Words ( 07/06/24 ) ****

class Solution {
public:
    string replaceWords(vector<string>& arr, string sentence) {
        unordered_map<string,bool> m;
        int n = sentence.size();
        for(int i=0;i<arr.size();i++){
            m[arr[i]] = true;
        } 
        string ans = "";
        string s="";
        for(int i=0;i<n;i++){
              if(sentence[i]==' '){
                 ans += s;
                 ans += " ";
                 s = "";
              }
              else{
                s += sentence[i];
                if(m[s]){
                    while(sentence[i]!=' ' && i<n){
                        i++;
                    }
                    ans += s;
                    s="";
                    if(i==n){
                        return ans;
                    }
                    else{
                        ans += " ";
                    }
                }
              }
        }
        ans += s;
        return ans;
    }
};

***********************************************************************************************************************************************
**** Relative Sort Array ( 11/06/24 ) ****

class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        vector<int> v(1001,0);
        for(int i=0;i<arr1.size();i++){
            v[arr1[i]]++;
        }
        int posi = 0;
        for(int i=0;i<arr2.size();i++){
            while(v[arr2[i]]){
                arr1[posi] = arr2[i];
                posi++;
                v[arr2[i]]--;
            }
        }
        for(int i=0;i<=1000;i++){
            while(v[i]){
                arr1[posi] = i;
                posi++;
                v[i]--;
            }
        }
        return arr1;
    }
};

********************************************************************************************************************************************
**** Sort Colors ( 12/06/24 ) ****

class Solution {
public:
    void sortColors(vector<int>& nums) {
         int z=0,o=0,t=0;
         for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                z++;
            }
            else if(nums[i]==1){
                o++;
            }
            else{
                t++;
            }
         }
         for(int i=0;i<nums.size();i++){
            if(z){
                nums[i]=0;
                z--;
            }
            else if(o){
                nums[i]=1;
                o--;
            }
            else{
                nums[i]=2;
                t--;
            }
         }
    }
};

**********************************************************************************************************************************************
**** Minimum Number of Moves to Seat Everyone ( 13/06/24 ) ****

class Solution {
public:
    int minMovesToSeat(vector<int>& seats, vector<int>& students) {
        sort(seats.begin(),seats.end());
        sort(students.begin(),students.end());
        int ans = 0;
        for(int i=0;i<seats.size();i++){
            ans += abs(seats[i]-students[i]);
        }
        return ans;
    }
};

************************************************************************************************************************************************
**** Minimum Increment to Make Array Unique ( 14/06/24 ) ****

class Solution {
public:
    int minIncrementForUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int ans = 0;
        for(int i=0;i<nums.size()-1;i++){
             if(nums[i+1]<=nums[i]){
                ans += (nums[i]-nums[i+1])+1;
                nums[i+1] = nums[i]+1;
             }
        }
        return ans;
    }
};

***********************************************************************************************************************************************************
**** 1052. Grumpy Bookstore Owner ( 21/06/24 ) ****

class Solution {
public:
    int maxSatisfied(vector<int>& cust, vector<int>& grumpy, int minutes) {
        int a=0,b=0,posi=0,val=0,i=0,j=0;
        for(i=0;i<minutes;i++){
            a += cust[i];
            if(grumpy[i]==0){
               b += cust[i];
            }
        }
        i=0,j=minutes-1;
        val = a-b;
        while(j+1<cust.size()){
             a -= cust[i];
             if(grumpy[i]==0){
                b -= cust[i];
             }
            i++;
            j++;
            a += cust[j];
            if(grumpy[j]==0){
                b += cust[j];
            }
            if(a-b > val){
                val = a-b;
                posi = i;
            }
        }
        while(minutes){
            grumpy[posi]= 0;
            posi++;
            minutes--;
        }
        int ans = 0;
        for(i=0;i<cust.size();i++){
            if(grumpy[i]==0){
                ans += cust[i];
            }
        }
        return ans;
    }
};

****************************************************************************************************************************************************
**** Count Number of Nice Subarrays ( 22/06/24 ) ****

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        unordered_map<int,int> m;
        int c = 0,ans = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]%2){
                c++;
            }
            m[c]++;
            if(c==k){
                ans++;
            }
            if(c>=k){
               ans += m[c-k];
            }
        }
        return ans;
    }
};

********************************************************************************************************************************************************
**** 1038. Binary Search Tree to Greater Sum Tree ( 25/06/24 ) ****

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void trav(TreeNode* root,int& p){
        if(root==NULL){
            return;
        }
        trav(root->right,p);
        p += root->val;
        root->val = p;
        trav(root->left,p);
    }
    
    TreeNode* bstToGst(TreeNode* root) {
        int p = 0;
        trav(root,p);
        return root;
    }
};

*************************************************************************************************************************************************
