******************************************************************************
**** 859. Buddy Strings ( 03/07/23 ) ****

class Solution {
public:
    bool buddyStrings(string s, string goal) {
        map<char,int> m;
        if(s.size()!=goal.size()){
            return false;
        }
        bool flag=false;
        int count = 0,gin=0;
        if(s == goal){
            for(int i=0;i<s.size();i++){
                if(m[s[i]]>0){
                    return true;
                }
                m[s[i]]++;
            }
             return false;   
        }
        else{
            for(int i=0;i<s.size();i++){
                if(count > 1){
                    return false;
                }
                if(gin > 2){
                    return false;
                }
                if(s[i]!=goal[i]){
                    if(flag){
                        if(m[goal[i]]>0 && m[s[i]]<0){
                            count++;
                            m[goal[i]]--;
                            m[s[i]]++;
                            flag = false;
                        }
                        gin++;
                    }
                    else{
                       m[s[i]]++;
                       m[goal[i]]--;
                        flag = true;
                        gin++;
                    }
                }
            }
            if(gin < 2){
                return false;
            }
            if(gin > 2){
                return false;
            }
            if(count==1){
                return true;
            }
            else{
                return false;
            }
        }
        return true;
    }
};

************************************************************************************************************
**** 1493. Longest Subarray of 1's After Deleting One Element ( 05/07/23 ) ****

class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        bool flag = false ;
        int a = 0 , b = 0,posi,ans=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0 && flag==false){     
                posi = i;
                flag = true;
                b++;
            }
            else if(nums[i]==0 && flag){
               // cout<<a<<" "<<b << " "<<ans << endl;
                ans = max(ans,b-a-1);
                a = posi +1;
                posi = i;
               // flag = false ;
                b++;
            }
            else{
                b++;
            }
        }
        ans = max(ans,b-a-1);
        return ans;
    }
};

**************************************************************************************************
**** 209. Minimum Size Subarray Sum ( 06/07/23 ) ****

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int i=0,j=0,sum=nums[0],ans=INT_MAX;
        bool flag = false;
        while(j<nums.size()){
            if(sum == target){
                ans = min(ans,j-i+1);
                flag = true;
                if(j+1 < nums.size()){
                    sum+=nums[j+1];
                }
                j++;
            }
            else if(sum>target){
                ans = min(ans,j-i+1);
                flag = true;
                if(i<j ){
                    sum-=nums[i];
                    i++;
                }
                else{
                    if(j+1 < nums.size()){
                        sum+=nums[j+1];
                    }
                    j++;
                }
            }
            else{
                if(j+1 < nums.size()){
                    sum+=nums[j+1];
                }
                j++;
            }
        }
        if(flag == false){
            return 0;
        }
        return ans;
    }
};

********************************************************************************************************
**** 2024. Maximize the Confusion of an Exam ( 07/07/23 ) ****

class Solution {
public:
    int maxConsecutiveAnswers(string answerKey, int k) {
        ////////////// for true ->
        int i=0,j=0,anst=0,t;
        if(answerKey[0]=='T'){
            t=k;
        }
        else{
            t=k-1;
        }
        
        while(j+1<answerKey.size()){
            if(answerKey[j+1]=='T'){
                j++;
            }
            else{
                if(t>0){
                    j++;
                    t--;
                }
                else{
                    anst = max(anst,j-i+1);
                    if(answerKey[i]=='T'){
                        i++;
                    }
                    else{
                        i++;
                        t++;
                    }
                }
            }
        }
        anst = max(anst,j-i+1);
        // for false -> 
        i=0;j=0;
        if(answerKey[0]=='F'){
            t=k;
        }
        else{
            t=k-1;
        }
        while(j+1<answerKey.size()){
            if(answerKey[j+1]=='F'){
                j++;
            }
            else{
                if(t>0){
                    j++;
                    t--;
                }
                else{
                    anst = max(anst,j-i+1);
                    if(answerKey[i]=='F'){
                        i++;
                    }
                    else{
                        i++;
                        t++;
                    }
                }
            }
        }
        anst = max(anst,j-i+1);
        return anst;
    }
};

***************************************************************************************************
**** 111. Minimum Depth of Binary Tree ( 10/07/23 ) ****

class Solution {
public:
    void solve(TreeNode* root, int& ans, int n){
        if(root->left==NULL && root->right==NULL){
            if(n<ans){
                ans=n;
            }
            return;
        }
        if(root->left){
            solve(root->left,ans,n+1);
        }
        if(root->right){
            solve(root->right,ans,n+1);
        }
        
    }
    int minDepth(TreeNode* root) {
        int ans = INT_MAX,n;
        if(root){
            solve(root,ans,1);
            return ans;
        }
        return 0;
    }
};

*******************************************************************************************************
**** 445. Add Two Numbers II ( 17/07/23 ) ****

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> n1;
        stack<int> n2;
        vector<int> ans;
        int carry=0,sum;
        ListNode* temp = l1;
        while(temp){
            n1.push(temp->val);
            temp=temp->next;
        }
        temp = l2;
        while(temp){
            n2.push(temp->val);
            temp=temp->next;
        }
        while(!n1.empty() && !n2.empty()){
            sum = n1.top() + n2.top() + carry;
            ans.push_back(sum%10);
            carry = sum/10;
            n1.pop();
            n2.pop();
        }
        while(!n1.empty()){
            sum = n1.top() + carry;
            ans.push_back(sum%10);
            carry = sum/10;
            n1.pop();
        }
         while(!n2.empty()){
            sum = n2.top() + carry;
            ans.push_back(sum%10);
            carry = sum/10;
            n2.pop();
        }
        while(carry){
            ans.push_back(carry%10);
            carry/=10;
        }
        reverse(ans.begin(),ans.end());
        ListNode* root = new ListNode(ans[0]);
        temp = root;
        ListNode* node;
        for(int i=1;i<ans.size();i++){
            node = new ListNode(ans[i]);
            temp->next = node;
            temp = node;
        }
        return root;
    }
};

*******************************************************************************************
**** 735. Asteroid Collision ( 20/07/23 ) ****

class Solution {
public:
    vector<int> asteroidCollision(vector<int>& ast) {
        stack<int> st;
        for(int i=0;i<ast.size();i++){
            
            
            
            if(st.empty()){
                st.push(ast[i]);
            }
            else{
                if((st.top() > 0 && ast[i] > 0) || (st.top() < 0 && ast[i] < 0)){
                    st.push(ast[i]);
                }
                else{
                    while(1){
                        if( st.empty() || (st.top() > 0 && ast[i] > 0) || (st.top() < 0 && ast[i] < 0) ){
                            st.push(ast[i]);
                            break;
                        }
                        else if(st.top() < 0 && ast[i] > 0){
                            st.push(ast[i]);
                            break;
                        }
                        else if(abs(st.top()) < abs(ast[i])) {
                            st.pop();
                        }
                        else if(abs(st.top()) == abs(ast[i])){
                            st.pop();
                            break;
                        }
                           else{
                               break;
                           }
                
            }
        }
                                
                                
                                
                                
    }
                                
                                
                                }
                vector<int> ans;
                while(!st.empty()){
                    ans.push_back(st.top());
                    st.pop();
                }
                reverse(ans.begin(),ans.end());
        return ans;
    }
};

********************************************************************************************************
