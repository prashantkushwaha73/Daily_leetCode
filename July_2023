******************************************************************************
**** 859. Buddy Strings ( 03/07/23 ) ****

class Solution {
public:
    bool buddyStrings(string s, string goal) {
        map<char,int> m;
        if(s.size()!=goal.size()){
            return false;
        }
        bool flag=false;
        int count = 0,gin=0;
        if(s == goal){
            for(int i=0;i<s.size();i++){
                if(m[s[i]]>0){
                    return true;
                }
                m[s[i]]++;
            }
             return false;   
        }
        else{
            for(int i=0;i<s.size();i++){
                if(count > 1){
                    return false;
                }
                if(gin > 2){
                    return false;
                }
                if(s[i]!=goal[i]){
                    if(flag){
                        if(m[goal[i]]>0 && m[s[i]]<0){
                            count++;
                            m[goal[i]]--;
                            m[s[i]]++;
                            flag = false;
                        }
                        gin++;
                    }
                    else{
                       m[s[i]]++;
                       m[goal[i]]--;
                        flag = true;
                        gin++;
                    }
                }
            }
            if(gin < 2){
                return false;
            }
            if(gin > 2){
                return false;
            }
            if(count==1){
                return true;
            }
            else{
                return false;
            }
        }
        return true;
    }
};

************************************************************************************************************
**** 1493. Longest Subarray of 1's After Deleting One Element ( 06/07/23 ) ****

class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        bool flag = false ;
        int a = 0 , b = 0,posi,ans=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0 && flag==false){     
                posi = i;
                flag = true;
                b++;
            }
            else if(nums[i]==0 && flag){
               // cout<<a<<" "<<b << " "<<ans << endl;
                ans = max(ans,b-a-1);
                a = posi +1;
                posi = i;
               // flag = false ;
                b++;
            }
            else{
                b++;
            }
        }
        ans = max(ans,b-a-1);
        return ans;
    }
};

**************************************************************************************************
