****************************************************************************************
**** 501. Find Mode in Binary Search Tree ( 01/11/23 ) ****

class Solution {
public:
   
    void solve(TreeNode* root,unordered_map<int,int>& m){
        if(root==NULL){
            return;
        }
        m[root->val]++;
        solve(root->left,m);
        solve(root->right,m);
    }

    vector<int> findMode(TreeNode* root) {
        unordered_map<int,int> m;
        solve(root,m);
        priority_queue<pair<int,int>> pq;
        for(auto i:m){
            pq.push({i.second,i.first});
        }
        int p = pq.top().first;
        vector<int> ans;
        while(!pq.empty()){
            if(pq.top().first == p){
                ans.push_back(pq.top().second);
                pq.pop();
            }
            else{
                break;
            }
        }
        return ans;
    }
};

***************************************************************************************************
**** 2265. Count Nodes Equal to Average of Subtree ( 02/11/23 ) ****

lass Solution {
public:
   
    pair<int,int> solve(TreeNode* root,int& ans){
        if(root==NULL){
            return {0,0};
        }
        pair<int,int> l = solve(root->left,ans);
        pair<int,int> r = solve(root->right,ans);
        if((l.first+r.first+root->val)/(l.second+r.second+1) == root->val){
            ans++;
        }
        return {l.first+r.first+root->val,l.second+r.second+1};
    }
  
    int averageOfSubtree(TreeNode* root) {
        int ans = 0;
        pair<int,int> p = solve(root,ans);
        return ans;
    }
};

***********************************************************************************************************
**** 1441. Build an Array With Stack Operations ( 03/11/23 ) ****

class Solution {
public:
    vector<string> buildArray(vector<int>& target, int n) {
        vector<string> ans;
        bool flag = false;
        int v,posi = 0;
        sort(target.begin(),target.end());
        for(int i=1;i<=n;i++){
            if(posi >= target.size()){
                return ans;
            }
            ans.push_back("Push");
            if(target[posi] != i){
                ans.push_back("Pop");
            }
            else{
                posi++;
            }
        }
        return ans;
    }
};

*******************************************************************************************************************
**** 1535. Find the Winner of an Array Game ( 05/11//23 ) ****

class Solution {
public:
    int getWinner(vector<int>& arr, int k) {
        queue<int> q;
        int n = arr[0],count=0;
        int m = arr[0],ginn=0;
        for(int i=1;i<arr.size();i++){
            q.push(arr[i]);
            m = max(m,arr[i]);
        }
        while(1){
            ginn = 0;
            while(n > q.front()){
                count++;
                if(count>=k){
                    return n;
                }
                ginn++;
                if(ginn > arr.size()+10){
                    return m;
                }
                q.push(q.front());
                q.pop();
            }
        
            q.push(n);
            n = q.front();
            q.pop();
            count = 1;
            if(k==1){
                return n;
            }
        
        }
        return -1;
    }
};

********************************************************************************************************
**** 2849. Determine if a Cell Is Reachable at a Given Time ( 08/11/23 ) ****

class Solution {
public:
     bool isReachableAtTime(int sx, int sy, int fx, int fy, int t) {
        int x = max(sx,fx) - min(sx,fx);
        int y = max(sy,fy) - min(sy,fy); 
        if( t >= (max(x,y))){  
                   if(t <= x+y){
            return true;
                }
            
            if( (t-(x+y)) > 1 ){
                return true;
            }
            else{
                if(x == 0 && y == 0){
                return false; }
                else{
                    return true;
                }
            }
        }
        return false;
    }
};

************************************************************************************************************
**** 1759. Count Number of Homogenous Substrings ( 09/11/23 ) ****

class Solution {
public:
  long long int mod = 1e9+7;
    long long int solve(long long int n){
        return ((n*(n+1))%mod)/2;
    }

    int countHomogenous(string s) {
        int i=0,j=0,count=0,ans=0;
        char chr = s[i];
        while(1){
            if(s[j] == chr){
                count++;
                if(j<s.size()-1){
                    j++;
                }
                else{
                    ans = ans%mod + solve(j-i+1)%mod;
                    return ans;
                }
            }
            else{
                ans = ans%mod + solve(j-i)%mod;
                i = j;
                chr = s[j];
                count = 0;
            }
        }
        return ans%mod;
    }
};

**********************************************************************************************************
**** 2642. Design Graph With Shortest Path Calculator ( 11/11/23 ) ****

class Graph {
public:
    int size; 
    unordered_map<int,vector<pair<int,int>>> m;
    Graph(int n, vector<vector<int>>& edges) {
        size = n;
        for(int i=0;i<edges.size();i++){
            m[edges[i][0]].push_back({edges[i][1],edges[i][2]});
        }
    }
    
    void addEdge(vector<int> edge) {
        m[edge[0]].push_back({edge[1],edge[2]});
        size+=1;
    }

    int shortestPath(int node1, int node2) {
     //   for(auto k:m){
      //      cout<<k.first<<" - ";
      //      for(int i=0;i<k.second.size();i++){
      //          cout<<k.second[i].first<<" ";
      //      }
      //      cout<<endl;
     //   }
        vector<bool> visited(size,false);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        visited[node1] = true;
        vector<int> value(size,0);
        pq.push({0,node1});
        pair<int,int> p;
        while(!pq.empty()){
            p = pq.top();
           // cout<<p.second<<" "<<p.first<<"  -  ";
            if(p.second == node2){
                return p.first;
            }
            pq.pop();
            for(int i=0;i<m[p.second].size();i++){
                    if(visited[m[p.second][i].first] == false){
                         pq.push({p.first+m[p.second][i].second,m[p.second][i].first});
                        visited[m[p.second][i].first] = true;
                        value[m[p.second][i].first] = p.first+m[p.second][i].second;
                
                    }
                    else{
                        if(p.first+m[p.second][i].second < value[m[p.second][i].first])
                        {
                                pq.push({p.first+m[p.second][i].second,m[p.second][i].first});
                                value[m[p.second][i].first] = p.first+m[p.second][i].second;
                   // cout<<p.first+m[p.second][i].second<<" "<<m[p.second][i].first;
                        }
                   
                    }
                
            }
           // cout<<endl;
        }
        return -1;
    }
};

**********************************************************************************************************************
**** 2785. Sort Vowels in a String ( 13/11/23 ) ****

class Solution {
public:
    string sortVowels(string s) {
        vector<int> posi;
        vector<char> val;
        for(int i=0;i<s.size();i++){
            if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U'){
                posi.push_back(i);
                val.push_back(s[i]);
            }
        }
        sort(val.begin(),val.end());
        for(int i=0;i<posi.size();i++){
            s[posi[i]] = val[i];
        }
        return s;
    }
};

****************************************************************************************************************************
**** 1930. Unique Length-3 Palindromic Subsequences ( 15/11/23 ) ****

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        set<string> ans;
        string str;
        unordered_map<char,int> m2;
        unordered_map<char,int> m1;
        set<char> sett;
        for(int i=0;i<s.size();i++){
            sett.insert(s[i]);
        }
        vector<char> v;
        for(auto i:sett){
            v.push_back(i);
        }
        m1[s[0]]++;
        unordered_map<string,bool> ginn;
        int f=0;
        for(int i=s.size()-1;i>1;i--){
            m2[s[i]]++;
        }
        for(int i=1;i<s.size()-1;i++){
     
             for(int p=0;p<v.size();p++){
                 if(m1[v[p]]>0 && m2[v[p]]>0){
                     str+=v[p]; str+=s[i]; str+=v[p];
                     if(ginn[str]==false){
                         ginn[str]=true;
                         f++;
                     }
                     str="";
                 }
             }
             m1[s[i]]++;
             m2[s[i+1]]--;
        }
        return f;
    }
};

***************************************************************************************************************
**** 1980. Find Unique Binary String ( 16/11/23 ) ****

class Solution {
public:
   
   void solve(int n,string str,unordered_map<string,bool>& m,string& ans){
       if(str.size() == n){
           if(m[str]){
               return;
           }
           else{
               ans = str;
               return;
           }
       }
       if(ans.size() == n){
           return;
       }
       solve(n,str+'0',m,ans);
       if(ans.size() == n){
           return;
       }
       solve(n,str+'1',m,ans);
   }

    string findDifferentBinaryString(vector<string>& nums) {
        int n = nums.size();
        unordered_map<string,bool> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]] = true;
        }
        string ans ="";
        solve(n,"",m,ans);
        return ans;
    }
};

*****************************************************************************************************************************
**** 1877. Minimize Maximum Pair Sum in Array ( 17/11/23 ) ****

class Solution {
public:
    int minPairSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int ans = INT_MIN;
        int i=0,j=nums.size()-1;
        while(i<j){
            ans = max(ans,nums[i]+nums[j]);
            i++; j--;
        }
        return ans;
    }
};

*****************************************************************************************************
**** 1887. Reduction Operations to Make the Array Elements Equal ( 19/11/23 ) ****

class Solution {
public:
    int reductionOperations(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int count=0,ans=0,posi=nums.size()-1,v=nums[nums.size()-1];
        while(1){
            while(nums[posi] == v){
                count++;
                posi--;
                if(posi<0){
                    return ans;
                }
            }
            ans += count;
            v = nums[posi];
        }
        return ans;
    }
};

***********************************************************************************************************************
**** 2391. Minimum Amount of Time to Collect Garbage ( 20/11/23 ) ****

class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int tm=0,tp=0,tg=0,ans=0;;
        vector<vector<int>> v(garbage.size(),vector<int> (3,0));
        for(int i=0;i<garbage.size();i++){
            for(int j=0;j<garbage[i].size();j++){
                if(garbage[i][j] == 'M'){
                    v[i][0]++;
                    tm++;
                }
                else if(garbage[i][j] == 'P'){
                    v[i][1]++;
                    tp++;
                }
                else{
                    v[i][2]++;
                    tg++;
                }
            }
        }
        int posi = 0;
        cout<<tm<<" "<<tp<<" "<<tg<<endl;
        while(tm){
            ans += v[posi][0];
        
            tm -= v[posi][0];
             if( tm==0 || posi >= travel.size()){
                break;
            }
            ans += travel[posi];
        
            posi++;
        }
        
        posi = 0;
        while(tp){
            ans += v[posi][1];
        
            tp -= v[posi][1];
             if(tp==0 || posi >= travel.size()){
                break;
            }
            ans += travel[posi];
        
            posi++;
        }
        cout<<endl;
        posi = 0;
        while(tg){
            ans += v[posi][2];
        
            tg -= v[posi][2];
            if( tg==0 || posi >= travel.size()){
                break;
            }
            ans += travel[posi];
        
            posi++;
        }
        return ans;
    }
};

****************************************************************************************************************
**** 1814. Count Nice Pairs in an Array ( 21/11/23 ) ****

class Solution {
public:
    int mod = 1e9+7,n,rev,ans=0;
    int countNicePairs(vector<int>& nums) {
      unordered_map<int,int> m;
      n = nums[0];
      rev = 0;
      while(n){
          rev = rev*10 + n%10;
          n /= 10;
      }
      m[rev-nums[0]]++;
      for(int i=1;i<nums.size();i++){
          n = nums[i];
      rev = 0;
      while(n){
          rev = rev*10 + n%10;
          n /= 10;
      }
         if(m[rev-nums[i]] > 0){
            ans = ans%mod + m[rev-nums[i]]%mod;
          }
         m[rev-nums[i]]++;
      }
      return ans%mod;
    }
};

****************************************************************************************************************
**** 1630. Arithmetic Subarrays ( 23/11/23 ) ****

class Solution {
public:
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {
        vector<int> v;
        int d; bool flag;
        vector<bool> ans;
        for(int i=0;i<l.size();i++){
             for(int j=l[i];j<=r[i];j++){
                 v.push_back(nums[j]);
             }
             sort(v.begin(),v.end());
             if(v.size() <=2){
                 ans.push_back(true);
             }
             else{
                d = v[1]-v[0];
                flag = true;
                for(int j=1;j<v.size()-1;j++){
                    if(v[j+1]-v[j] != d){
                        flag = false;
                        break;
                        
                    }
                }
                if(flag){
                    ans.push_back(true);
                }
                else{
                    ans.push_back(false);
                }
             }
             v.clear();
        }
        return ans;
    }
};

******************************************************************************************************
**** 1561. Maximum Number of Coins You Can Get ( 24/11/23 ) ****

class Solution {
public:
    int maxCoins(vector<int>& piles) {
        sort(piles.begin(),piles.end());
        int i=0,j=piles.size()-2,k=piles.size()-1,ans=0;
        while(i<j){
           ans += piles[j];
           i++; j-=2; k-=2;
        }
        return ans;
    }
};

*******************************************************************************************************
