****************************************************************************************
**** 501. Find Mode in Binary Search Tree ( 01/11/23 ) ****

class Solution {
public:
   
    void solve(TreeNode* root,unordered_map<int,int>& m){
        if(root==NULL){
            return;
        }
        m[root->val]++;
        solve(root->left,m);
        solve(root->right,m);
    }

    vector<int> findMode(TreeNode* root) {
        unordered_map<int,int> m;
        solve(root,m);
        priority_queue<pair<int,int>> pq;
        for(auto i:m){
            pq.push({i.second,i.first});
        }
        int p = pq.top().first;
        vector<int> ans;
        while(!pq.empty()){
            if(pq.top().first == p){
                ans.push_back(pq.top().second);
                pq.pop();
            }
            else{
                break;
            }
        }
        return ans;
    }
};

***************************************************************************************************
**** 2265. Count Nodes Equal to Average of Subtree ( 02/11/23 ) ****

lass Solution {
public:
   
    pair<int,int> solve(TreeNode* root,int& ans){
        if(root==NULL){
            return {0,0};
        }
        pair<int,int> l = solve(root->left,ans);
        pair<int,int> r = solve(root->right,ans);
        if((l.first+r.first+root->val)/(l.second+r.second+1) == root->val){
            ans++;
        }
        return {l.first+r.first+root->val,l.second+r.second+1};
    }
  
    int averageOfSubtree(TreeNode* root) {
        int ans = 0;
        pair<int,int> p = solve(root,ans);
        return ans;
    }
};

***********************************************************************************************************
