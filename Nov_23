****************************************************************************************
**** 501. Find Mode in Binary Search Tree ( 01/11/23 ) ****

class Solution {
public:
   
    void solve(TreeNode* root,unordered_map<int,int>& m){
        if(root==NULL){
            return;
        }
        m[root->val]++;
        solve(root->left,m);
        solve(root->right,m);
    }

    vector<int> findMode(TreeNode* root) {
        unordered_map<int,int> m;
        solve(root,m);
        priority_queue<pair<int,int>> pq;
        for(auto i:m){
            pq.push({i.second,i.first});
        }
        int p = pq.top().first;
        vector<int> ans;
        while(!pq.empty()){
            if(pq.top().first == p){
                ans.push_back(pq.top().second);
                pq.pop();
            }
            else{
                break;
            }
        }
        return ans;
    }
};

***************************************************************************************************
**** 2265. Count Nodes Equal to Average of Subtree ( 02/11/23 ) ****

lass Solution {
public:
   
    pair<int,int> solve(TreeNode* root,int& ans){
        if(root==NULL){
            return {0,0};
        }
        pair<int,int> l = solve(root->left,ans);
        pair<int,int> r = solve(root->right,ans);
        if((l.first+r.first+root->val)/(l.second+r.second+1) == root->val){
            ans++;
        }
        return {l.first+r.first+root->val,l.second+r.second+1};
    }
  
    int averageOfSubtree(TreeNode* root) {
        int ans = 0;
        pair<int,int> p = solve(root,ans);
        return ans;
    }
};

***********************************************************************************************************
**** 1441. Build an Array With Stack Operations ( 03/11/23 ) ****

class Solution {
public:
    vector<string> buildArray(vector<int>& target, int n) {
        vector<string> ans;
        bool flag = false;
        int v,posi = 0;
        sort(target.begin(),target.end());
        for(int i=1;i<=n;i++){
            if(posi >= target.size()){
                return ans;
            }
            ans.push_back("Push");
            if(target[posi] != i){
                ans.push_back("Pop");
            }
            else{
                posi++;
            }
        }
        return ans;
    }
};

*******************************************************************************************************************
**** 1535. Find the Winner of an Array Game ( 05/11//23 ) ****

class Solution {
public:
    int getWinner(vector<int>& arr, int k) {
        queue<int> q;
        int n = arr[0],count=0;
        int m = arr[0],ginn=0;
        for(int i=1;i<arr.size();i++){
            q.push(arr[i]);
            m = max(m,arr[i]);
        }
        while(1){
            ginn = 0;
            while(n > q.front()){
                count++;
                if(count>=k){
                    return n;
                }
                ginn++;
                if(ginn > arr.size()+10){
                    return m;
                }
                q.push(q.front());
                q.pop();
            }
        
            q.push(n);
            n = q.front();
            q.pop();
            count = 1;
            if(k==1){
                return n;
            }
        
        }
        return -1;
    }
};

********************************************************************************************************
**** 2849. Determine if a Cell Is Reachable at a Given Time ( 08/11/23 ) ****

class Solution {
public:
     bool isReachableAtTime(int sx, int sy, int fx, int fy, int t) {
        int x = max(sx,fx) - min(sx,fx);
        int y = max(sy,fy) - min(sy,fy); 
        if( t >= (max(x,y))){  
                   if(t <= x+y){
            return true;
                }
            
            if( (t-(x+y)) > 1 ){
                return true;
            }
            else{
                if(x == 0 && y == 0){
                return false; }
                else{
                    return true;
                }
            }
        }
        return false;
    }
};

************************************************************************************************************
**** 1759. Count Number of Homogenous Substrings ( 09/11/23 ) ****

class Solution {
public:
  long long int mod = 1e9+7;
    long long int solve(long long int n){
        return ((n*(n+1))%mod)/2;
    }

    int countHomogenous(string s) {
        int i=0,j=0,count=0,ans=0;
        char chr = s[i];
        while(1){
            if(s[j] == chr){
                count++;
                if(j<s.size()-1){
                    j++;
                }
                else{
                    ans = ans%mod + solve(j-i+1)%mod;
                    return ans;
                }
            }
            else{
                ans = ans%mod + solve(j-i)%mod;
                i = j;
                chr = s[j];
                count = 0;
            }
        }
        return ans%mod;
    }
};

**********************************************************************************************************
