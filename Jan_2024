********************************************************************************************************
**** 2610. Convert an Array Into a 2D Array With Conditions ( 02/01/23 ) ****

class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>> ans;
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        queue<pair<int,int>> q;
        for(auto i:m){
            q.push({i.first,i.second});
        }
        vector<int> v;
        int s;
        while(!q.empty()){
            s = q.size();
            for(int i=0;i<s;i++){
                v.push_back(q.front().first);
                if(q.front().second>1){
                    q.push({q.front().first,q.front().second-1});
                }
                q.pop();
            }
            ans.push_back(v);
            v.clear();
        }
        return ans;
    }
};

*************************************************************************************************************************
**** 938. Range Sum of BST ( 08/01/23 ) ****

class Solution {
public:
    void solve(TreeNode* root,int low,int high,int& ans){
        if(root==NULL){
            return;
        }
        solve(root->left,low,high,ans);
        if(root->val <= high && root->val >= low){
            ans += root->val;
        }
        solve(root->right,low,high,ans);
    }

    int rangeSumBST(TreeNode* root, int low, int high) {
        int ans = 0;
        solve(root,low,high,ans);
        return ans;
    }
};

***************************************************************************************************************************
**** 872. Leaf-Similar Trees ( 09/01/23 ) ****

class Solution {
public:
    void solve(TreeNode* root,vector<int>& r){
        if(root==NULL){
            return;
        }
        solve(root->left,r);
        if(root->left==NULL && root->right==NULL){
            r.push_back(root->val);
        }
        solve(root->right,r);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> r;
        solve(root1,r);
        vector<int> v;
        solve(root2,v);
        return r==v;
    }
};

********************************************************************************************************************************
**** 1026. Maximum Difference Between Node and Ancestor ( 11/01/23 ) ****

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void (solve(TreeNode* root,vector<int>& store,int& ans)){
        if(root==NULL){
            return;
        }
        for(int i=0;i<store.size();i++){
            if( (  max(store[i],root->val) - min(store[i],root->val)) >ans){
                ans= max(store[i],root->val) - min(store[i],root->val);
            }
        }
        store.push_back(root->val);
        solve(root->left,store,ans);
        //store.pop_back();
        solve(root->right,store,ans);
        store.pop_back();
        return;
    }
public:
    int maxAncestorDiff(TreeNode* root) {
        vector<int> store;
        int ans=INT_MIN;
        solve(root,store,ans);
        return ans;
    }
};

***************************************************************************************************
**** 1704. Determine if String Halves Are Alike ( 12/01/24) ****

class Solution {
public:
    bool halvesAreAlike(string s) {
        vector<char> match={'a','e','i','o','u','A','E','I','O','U'};
        string a="",b="";
        int size=s.size(),i=0;
        size=size/2;
        while(i<size){
            if(count(match.begin(),match.end(),s[i]) != 0){ 
            a.push_back(s[i]);}
             if(count(match.begin(),match.end(),s[s.size()-i-1]) != 0){ 
            b.push_back(s[i]);}
            i++;
        }
        if(a.size()==b.size()){
            return true;
        }
        else{
            return false;
        }
    }
};

*********************************************************************************************************
