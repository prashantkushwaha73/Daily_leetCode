********************************************************************************************************
**** 2610. Convert an Array Into a 2D Array With Conditions ( 02/01/23 ) ****

class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>> ans;
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        queue<pair<int,int>> q;
        for(auto i:m){
            q.push({i.first,i.second});
        }
        vector<int> v;
        int s;
        while(!q.empty()){
            s = q.size();
            for(int i=0;i<s;i++){
                v.push_back(q.front().first);
                if(q.front().second>1){
                    q.push({q.front().first,q.front().second-1});
                }
                q.pop();
            }
            ans.push_back(v);
            v.clear();
        }
        return ans;
    }
};

*************************************************************************************************************************
**** 938. Range Sum of BST ( 08/01/23 ) ****

class Solution {
public:
    void solve(TreeNode* root,int low,int high,int& ans){
        if(root==NULL){
            return;
        }
        solve(root->left,low,high,ans);
        if(root->val <= high && root->val >= low){
            ans += root->val;
        }
        solve(root->right,low,high,ans);
    }

    int rangeSumBST(TreeNode* root, int low, int high) {
        int ans = 0;
        solve(root,low,high,ans);
        return ans;
    }
};

***************************************************************************************************************************
**** 872. Leaf-Similar Trees ( 09/01/23 ) ****

class Solution {
public:
    void solve(TreeNode* root,vector<int>& r){
        if(root==NULL){
            return;
        }
        solve(root->left,r);
        if(root->left==NULL && root->right==NULL){
            r.push_back(root->val);
        }
        solve(root->right,r);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> r;
        solve(root1,r);
        vector<int> v;
        solve(root2,v);
        return r==v;
    }
};

********************************************************************************************************************************
**** 1026. Maximum Difference Between Node and Ancestor ( 11/01/23 ) ****

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void (solve(TreeNode* root,vector<int>& store,int& ans)){
        if(root==NULL){
            return;
        }
        for(int i=0;i<store.size();i++){
            if( (  max(store[i],root->val) - min(store[i],root->val)) >ans){
                ans= max(store[i],root->val) - min(store[i],root->val);
            }
        }
        store.push_back(root->val);
        solve(root->left,store,ans);
        //store.pop_back();
        solve(root->right,store,ans);
        store.pop_back();
        return;
    }
public:
    int maxAncestorDiff(TreeNode* root) {
        vector<int> store;
        int ans=INT_MIN;
        solve(root,store,ans);
        return ans;
    }
};

***************************************************************************************************
**** 1704. Determine if String Halves Are Alike ( 12/01/24) ****

class Solution {
public:
    bool halvesAreAlike(string s) {
        vector<char> match={'a','e','i','o','u','A','E','I','O','U'};
        string a="",b="";
        int size=s.size(),i=0;
        size=size/2;
        while(i<size){
            if(count(match.begin(),match.end(),s[i]) != 0){ 
            a.push_back(s[i]);}
             if(count(match.begin(),match.end(),s[s.size()-i-1]) != 0){ 
            b.push_back(s[i]);}
            i++;
        }
        if(a.size()==b.size()){
            return true;
        }
        else{
            return false;
        }
    }
};

*********************************************************************************************************
**** 1347. Minimum Number of Steps to Make Two Strings Anagram ( 13/01/24 ) ****

class Solution {
public:
    int minSteps(string s, string t) {
        unordered_map<char,int> m1;
        unordered_map<char,int> m2;
        for(int i=0;i<s.size();i++){
            m1[s[i]]++;
        }
        int ans = 0;
        for(int i=0;i<t.size();i++){
            m2[t[i]]++;
        }
        for(auto i:m2){
            if(i.second == m1[i.first]){
                i.second = 0;
            }
            else if(i.second > m1[i.first]){
                i.second = i.second - m1[i.first];
                ans += i.second;
            }
            else{
                i.second = 0;
            }
        }
        return ans;
    }
};

***************************************************************************************************************
**** 1657. Determine if Two Strings Are Close ( 14/01/24 ) ****

class Solution {
public:
    bool closeStrings(string word1, string word2) {
        if(word1.size()!=word2.size()){
            return false;
        }
        unordered_map<char,int> m1;
        for(int i=0;i<word1.size();i++){
            m1[word1[i]]++;
        }
        unordered_map<char,int> m2;
        for(int i=0;i<word2.size();i++){
            if(m1[word2[i]]==0){
                return false;
            }
            m2[word2[i]]++;
        }
        vector<int> v1;
        for(auto i:m1){
            v1.push_back(i.second);
        }
        vector<int> v2;
        for(auto i:m2){
            v2.push_back(i.second);
        }
        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());
        if(v1.size()!=v2.size()){
            return false;
        }
        for(int i=0;i<v1.size();i++){
            if(v1[i]!=v2[i]){
                return false;
            }
        }
        return true;
    }
};

*******************************************************************************************************************
**** 2225. Find Players With Zero or One Losses ( 15/01/24 ) ****

class Solution {
public:
    vector<vector<int>> findWinners(vector<vector<int>>& matches) {
        unordered_map<int,int> m;
        unordered_map<int,bool> v;
        int a,b;
        for(int i=0;i<matches.size();i++){
            v[matches[i][0]]=true;
            v[matches[i][1]]=true;
        }
        vector<vector<int>> ans;
        for(int i=0;i<matches.size();i++){
            m[matches[i][1]]++;
        }
        vector<int> v1;
        vector<int> v2;
        for(auto i:v){
            if(i.second && m[i.first]==0){
                v1.push_back(i.first);
            }
            if(i.second && m[i.first]==1){
                v2.push_back(i.first);
            }
        }
        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());
        ans.push_back(v1);
        ans.push_back(v2);
        return ans;
    }
};

*******************************************************************************************************************
**** 1207. Unique Number of Occurrences ( 17/01/24 ) ****

class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        vector<int> store;
        int key=1001,cont=-1,i=0;
        sort(arr.begin(),arr.end());
        while(i<arr.size()){
            if(arr[i]!=key){
                
                    if(count(store.begin(),store.end(),cont) == 0){
                    store.push_back(cont);}
                    else{
                        return false;
                    }
                
                key=arr[i];
                cont=1;
            }
            else{
                cont++;
            }
            i++;
            
        }
        if(i==arr.size()){
        if(count(store.begin(),store.end(),cont) == 0){
                    store.push_back(cont);}
                    else{
                        return false;
                    }
        }
        return true;
    }
};

*****************************************************************************************************************************
**** 70. Climbing Stairs ( 18/01/24 ) ****

class Solution {
public:
    int solve(int posi,int n,vector<int>& dp){
        if(posi==n){
            return 1;
        }
        if(posi > n){
            return 0;
        }
        if(dp[posi]!=-1){
            return dp[posi];
        }
        int v = 0;
        v += solve(posi+1,n,dp);
        v += solve(posi+2,n,dp);
        return dp[posi] = v;
    }
    int climbStairs(int n) {
        vector<int> dp(n,-1);
        return solve(0,n,dp);
    }
};

******************************************************************************************************************************
**** 198. House Robber ( 21/01/24 ) ****

class Solution {
public:

    int solve(int posi,vector<int>& nums,vector<int>& dp){
        if(posi>=nums.size()){
            return 0;
        }
        if(dp[posi]!=-1){
            return dp[posi];
        }
        int a = nums[posi]+solve(posi+2,nums,dp);
        int b = solve(posi+1,nums,dp);
        return dp[posi] = max(a,b);
    }

    int rob(vector<int>& nums) {
        vector<int> dp(nums.size(),-1);
        return solve(0,nums,dp);
    }
};

************************************************************************************************************************************
**** 645. Set Mismatch ( 22/01/24 ) ****

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        vector<int> ans;
        sort(nums.begin(),nums.end());
        unordered_map<int,bool> m;
        for(int i=0;i<nums.size();i++){
            if(m[nums[i]]){
               ans.push_back(nums[i]);
            }
            m[nums[i]]=true;
        }
        for(int i=1;i<=nums.size();i++){
            if(m[i]!=true){
                ans.push_back(i);
                return ans;
            }
        }
        return ans;
    }
};

*****************************************************************************************************************************************
**** 1239. Maximum Length of a Concatenated String with Unique Characters ( 23/01/24 ) ****

class Solution {
public:
  
    bool check(string s,unordered_map<char,bool>& m){
        for(int i=0;i<s.size();i++){
            if(m[s[i]]){
                return false;
            }
        }
        unordered_map<char,bool> p;
        for(int i=0;i<s.size();i++){
           if(p[s[i]]){
               return false;
           }
           p[s[i]]=true;
        }
        for(int i=0;i<s.size();i++){
            m[s[i]]=true;
        }
        return true;
    }

    void dlt(string s,unordered_map<char,bool>& m){
        for(int i=0;i<s.size();i++){
            m[s[i]]=false;
        }
    }

    void solve(vector<string>& arr,unordered_map<char,bool>& m,int posi,int count,int& ans){
        if(posi >= arr.size()){
            ans = max(ans,count);
            return;
        }
        if(check(arr[posi],m)){
            solve(arr,m,posi+1,count+arr[posi].size(),ans);
            dlt(arr[posi],m);
        }
        solve(arr,m,posi+1,count,ans);
    }

    int maxLength(vector<string>& arr) {
        unordered_map<char,bool> m;
        int ans = 0; 
        solve(arr,m,0,0,ans);
        return ans;
    }
};

*********************************************************************************************************************
**** 1457. Pseudo-Palindromic Paths in a Binary Tree ( 24/01/24 ) ****

class Solution {
public:
   bool check(vector<int> v){
       int count=0;
       for(int i=1;i<10;i++){
           if(v[i]){
               count++;
           }
       }
       if(count<=1){
           return true;
       }
       return false;
   }

    void solve(TreeNode* root,vector<int> v,int& ans){
        if(root==NULL){
            return;
        }
        if(v[root->val]){
            v[root->val]--;
        }
        else{
            v[root->val]++;
        }
        if(root->left==NULL && root->right==NULL && check(v)){
             ans++;
        }
        solve(root->left,v,ans);
        solve(root->right,v,ans);
    }

    int pseudoPalindromicPaths (TreeNode* root) {
        if(root->left==NULL &&  root->right==NULL){
            return 1;
        }
        int ans = 0;
        vector<int> v(10,0);
        v[root->val]++;
        solve(root->left,v,ans);
        solve(root->right,v,ans);
        return ans;
    }
};

*****************************************************************************************************************
**** 576. Out of Boundary Paths ( 26/01/24 ) ****

class Solution {
public:
    int M = 1e9+7;
    int solve(int x,int y,int count,int& maxMove,int& m,int& n,vector<vector<vector<int>>>& dp){
        if(x<0 || x>=m || y<0 || y>=n){
            return 1;
        }
        if(count>=maxMove){
            return 0;
        }
        if(dp[x][y][count] != -1){
            return dp[x][y][count];
        }
        int v = 0;
        v = v%M + solve(x,y+1,count+1,maxMove,m,n,dp)%M;
        v = v%M + solve(x,y-1,count+1,maxMove,m,n,dp)%M;
        v = v%M + solve(x-1,y,count+1,maxMove,m,n,dp)%M;
        v = v%M + solve(x+1,y,count+1,maxMove,m,n,dp)%M;
        return dp[x][y][count] = v%M;
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        vector<vector<vector<int>>> dp(m,vector<vector<int>> (n,vector<int> (maxMove,-1)));
        return solve(startRow,startColumn,0,maxMove,m,n,dp);
    }
};

**************************************************************************************************************************************
**** 232. Implement Queue using Stacks ( 29/01/24 ) ****

class MyQueue {
public:
    stack<int> s1;
    stack<int> s2;
    MyQueue() {
        
    }
    void push(int x) {
        s1.push(x);
        return;
    }
    int pop() {
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        int r = s2.top();
        s2.pop();
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
        return r;
    }
    int peek() {
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        int r = s2.top();
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
        return r;
    }
    bool empty() {
        return s1.empty();
    }
};

******************************************************************************************************************
