********************************************************************************************************
**** 2610. Convert an Array Into a 2D Array With Conditions ( 02/01/23 ) ****

class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>> ans;
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        queue<pair<int,int>> q;
        for(auto i:m){
            q.push({i.first,i.second});
        }
        vector<int> v;
        int s;
        while(!q.empty()){
            s = q.size();
            for(int i=0;i<s;i++){
                v.push_back(q.front().first);
                if(q.front().second>1){
                    q.push({q.front().first,q.front().second-1});
                }
                q.pop();
            }
            ans.push_back(v);
            v.clear();
        }
        return ans;
    }
};

*************************************************************************************************************************
**** 938. Range Sum of BST ( 08/01/23 ) ****

class Solution {
public:
    void solve(TreeNode* root,int low,int high,int& ans){
        if(root==NULL){
            return;
        }
        solve(root->left,low,high,ans);
        if(root->val <= high && root->val >= low){
            ans += root->val;
        }
        solve(root->right,low,high,ans);
    }

    int rangeSumBST(TreeNode* root, int low, int high) {
        int ans = 0;
        solve(root,low,high,ans);
        return ans;
    }
};

***************************************************************************************************************************
**** 872. Leaf-Similar Trees ( 09/01/23 ) ****

class Solution {
public:
    void solve(TreeNode* root,vector<int>& r){
        if(root==NULL){
            return;
        }
        solve(root->left,r);
        if(root->left==NULL && root->right==NULL){
            r.push_back(root->val);
        }
        solve(root->right,r);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> r;
        solve(root1,r);
        vector<int> v;
        solve(root2,v);
        return r==v;
    }
};

********************************************************************************************************************************
