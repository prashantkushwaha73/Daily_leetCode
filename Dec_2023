**********************************************************************************************************************
**** 1662. Check If Two String Arrays are Equivalent ( 01/12/23 ) ****

class Solution {
public:
    bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {
        string s1="";
        for(int i=0;i<word1.size();i++){
            s1+=word1[i];
        }
        string s2="";
        for(int i=0;i<word2.size();i++){
            s2+=word2[i];
        }
        return (s1==s2);
    }
};

***************************************************************************************************************************
**** 1160. Find Words That Can Be Formed by Characters ( 02/12/23 ) ****

class Solution {
public:
    int countCharacters(vector<string>& words, string chars) {
       unordered_map<char,int> m;
       for(int i=0;i<chars.size();i++){
           m[chars[i]]++;
       } 
       unordered_map<char,int> count;
       int ans = 0;
       bool flag;
       for(int i=0;i<words.size();i++){
           flag = true;
           for(int j=0;j<words[i].size();j++){
               count[words[i][j]]++;
               if(count[words[i][j]] > m[words[i][j]]){
                   flag = false;
                   break;
               }
           }
           if(flag){
               ans+=words[i].size();
           }
           count.clear();
       }
       return ans;
    }
};

****************************************************************************************************************
****

class Solution {
public:
    int minTimeToVisitAllPoints(vector<vector<int>>& points) {
        int ans = 0,i,j;
        for(int p=1;p<points.size();p++){
               i = abs(points[p][0]-points[p-1][0]); j = abs(points[p][1]-points[p-1][1]);
               ans += min(i,j);
               ans += max(i,j)-min(i,j);
        }
        return ans;
    }
};

********************************************************************************************************************
**** 2264. Largest 3-Same-Digit Number in String ( 04/12/23 ) ****

class Solution {
public:
    string largestGoodInteger(string num) {
        int maxi = INT_MIN;
        string ans="";
        int i=0,j=2;
        while(j<num.size()){
            if(num[i]==num[i+1] && num[i]==num[j] && num[i]>maxi){
                 maxi = num[i];
                 ans = num.substr(i,j-i+1);
            }
            else{
                i++; j++;
            }
        }
        return ans;
    }
};

****************************************************************************************************************************
**** 1688. Count of Matches in Tournament ( 05/12/23 ) ****

class Solution {
public:
    int numberOfMatches(int n) {
        int ans = 0;
        while(n!=1){
            if(n%2){
                ans += (n-1)/2;
                n = (n-1)/2 + 1;
            }
            else{
                ans += n/2;
                n = n/2;
            }     
        }
        return ans;
    }
};

**************************************************************************************************************************
**** 1716. Calculate Money in Leetcode Bank ( 06/12/23 ) ****

class Solution {
public:
    int totalMoney(int n) {
        int a = 1,ans = 0;
        while(n>7){
            ans += (7*a + 21);
            a++;
            n-=7;
        }
        ans += (a*n + (n*(n-1))/2);
        return ans;
    }
};

***************************************************************************************************************************
**** 1903. Largest Odd Number in String ( 07/12/23 ) ****

class Solution {
public:
    string largestOddNumber(string num) {
        for(int i=num.size();i>=0;i--){
            if((int(num[i])-48)%2 ){
                return num.substr(0,i+1);
            }
        }
        return "";
    }
};

*************************************************************************************************************************
**** 606. Construct String from Binary Tree ( 08/12/23 ) ****

class Solution {
public:
    void solve(TreeNode* root,string& ans){
        ans += to_string(root->val);
        if(root->left || root->right){
            ans += "(";
            if(root->left){
                solve(root->left,ans);
            }
            ans += ")";
            if(root->right){
                ans += "(";
                solve(root->right,ans);
                ans += ")";
            }
        }
    }
    string tree2str(TreeNode* root) {
        string ans="";
        if(root){
            solve(root,ans);
        }
        return ans;
    }
};

**************************************************************************************************************************
****

class Solution {
private:
    void traverse(TreeNode* root,vector<int>& ans){
        if(root==NULL){
            return;
        }
        traverse(root->left,ans);
        ans.push_back(root->val);
        traverse(root->right,ans);
    }
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        traverse(root,ans);
        return ans;
    }
};

********************************************************************************************************************************
**** 867. Transpose Matrix ( 10/12/23 ) ****

class Solution {
public:
    vector<vector<int>> transpose(vector<vector<int>>& matrix) {
        vector<vector<int>> ans;
        vector<int> v;
        for(int j=0;j<matrix[0].size();j++){
            for(int i=0;i<matrix.size();i++){
                v.push_back(matrix[i][j]);
            }
            ans.push_back(v);
            v.clear();
        }
        return ans;
    }
};

**********************************************************************************************************************
**** 1287. Element Appearing More Than 25% In Sorted Array ( 12/12/23 ) ****

class Solution {
public:
    int findSpecialInteger(vector<int>& arr) {
        int size = arr.size()/4 +1;
        int j=1,v=arr[0],count=1;
        while(j<arr.size()){
            if(arr[j]!=v){
                if(count>=size){
                    return v;
                }
                count = 1;
                v = arr[j];
                j++;
            }
            else{
              count++;
            j++;
            }
        }
         if(count>=size){
                    return v;
                }
        return arr[0];
    }
};

******************************************************************************************************************
