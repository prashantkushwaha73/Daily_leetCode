*****************************************************************************************************************
**** 2966. Divide Array Into Arrays With Max Difference ( 01/02/24 ) ****

class Solution {
public:
    vector<vector<int>> divideArray(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        vector<vector<int>> r;
        vector<int> v;
        int i = 0;
        while(i<nums.size()){
              while(v.size()<3){
                   if(v.size()){
                       if(nums[i]-v[0]>k){
                           return r;
                       }
                       else{
                           v.push_back(nums[i]);
                       }
                   }
                   else{
                       v.push_back(nums[i]);
                   }
                   i++;
              }
              ans.push_back(v);
              v.clear();
        }
        return ans;
    }
};

********************************************************************************************************************************************************
**** 1291. Sequential Digits ( 02/02/24 ) ****

class Solution {
public:
    vector<int> sequentialDigits(int low, int high) {
        int v,p;
        vector<int> ans;
        for(int i=1;i<9;i++){
            v=i;
            p=i;
            while(1){
               if(v>high){
                   break;
               }
               else if(v>=low && v<=high){
                   ans.push_back(v);
               }
               p++;
               if(p>9){
                   break;
               }
               v = (v*10)+p;
            }
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};

***********************************************************************************************************************
**** 387. First Unique Character in a String ( 05/02/24 ) ****

class Solution {
public:
    int firstUniqChar(string s) {
        vector<int> v(26,0);
        for(int i=0;i<s.size();i++){
            v[s[i]-'a']++;
        }
        for(int i=0;i<s.size();i++){
            if(v[s[i]-'a']==1){
                return i;
            }
        }
        return -1;
    }
};

****************************************************************************************************************************
**** 49. Group Anagrams ( 06/02/24 ) ****

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        string s;
        vector<string> copy=strs;
        for(int i=0;i<strs.size();i++){
            sort(strs[i].begin(),strs[i].end());
        }
    //-------------------------------------------------    
        vector<vector<int>> fill;
        vector<int> fil;
        vector<string> gap;
        for(int j=0;j<strs.size();j++){
            if(count(gap.begin(),gap.end(),strs[j])==0){
                s=strs[j];
                gap.push_back(s);
                for(int k=0;k<strs.size();k++){
                    if(strs[k]==s){
                       fil.push_back(k); 
                    }
                }
                fill.push_back(fil);
                fil.clear();
                
            }
        }
        
        
        
 //------------------------------------------------------------------
        vector<vector<string>> ans;
        vector<string> ao;
        for(int i=0;i<fill.size();i++){
            for(int j=0;j<fill[i].size();j++){
               ao.push_back(copy[fill[i][j]]);
            }
           ans.push_back(ao);
            ao.clear();
        }
        return ans;
    }
};

*******************************************************************************************************************
**** 451. Sort Characters By Frequency ( 07/01/24 ) ****

class Solution {
public:
 static bool cmp(pair<char, int>& a,pair<char, int>& b)
{
    return a.second > b.second;
}
    string frequencySort(string s) {
        unordered_map<char,int> mp;
        int len=s.length();
        for(int i=0;i<len;i++){
            mp[s[i]]++;
        }
        vector<pair<char,int>> v;
        for(auto it:mp){
         v.push_back(it);
            }
           sort(v.begin(), v.end(), cmp);
            string ans="";
            for (auto& it : v) {
                //cout<<it.second<<" ";
                for(int i =0; i<it.second;i++)
      ans+=it.first;
    }
     return ans;
    }
   
};

**********************************************************************************************************************
**** 1463. Cherry Pickup II ( 11/02/24 ) ****

class Solution {
public:
   
    int solve(int r,int s,int e,vector<vector<int>>& grid,vector<vector<vector<int>>>& dp){
        if(r>=grid.size() || s<0 || s>=grid[0].size() || e<0 || e>= grid[0].size()){
            return 0;
        }
        if(dp[r][s][e]!=-1){
            return dp[r][s][e];
        }
        int a1 = solve(r+1,s-1,e-1,grid,dp);
        int a2 = solve(r+1,s-1,e,grid,dp);
        int a3 = solve(r+1,s-1,e+1,grid,dp);

        int b1 = solve(r+1,s,e-1,grid,dp);
        int b2 = solve(r+1,s,e,grid,dp);
        int b3 = solve(r+1,s,e+1,grid,dp);

        int c1 = solve(r+1,s+1,e-1,grid,dp);
        int c2 = solve(r+1,s+1,e,grid,dp);
        int c3 = solve(r+1,s+1,e+1,grid,dp);
        
        int a4,b4,c4;
        if(s==e){
            a4 = grid[r][s] + max(a1,max(a2,a3));
            b4 = grid[r][s] + max(b1,max(b2,b3));
            c4 = grid[r][s] + max(c1,max(c2,c3));
        }
        else{
            a4 = grid[r][s]+grid[r][e] + max(a1,max(a2,a3));
            b4 = grid[r][s]+grid[r][e] + max(b1,max(b2,b3));
            c4 = grid[r][s]+grid[r][e] + max(c1,max(c2,c3));
        }
        
        return dp[r][s][e] = max(a4,max(b4,c4));
        
    }

    int cherryPickup(vector<vector<int>>& grid) {
        vector<vector<vector<int>>> dp(grid.size(),vector<vector<int>> (grid[0].size(),vector<int> (grid[0].size(),-1)));
        return solve(0,0,grid[0].size()-1,grid,dp);
    }
};

*****************************************************************************************************************************
**** 169. Majority Element ( 12/02/24 ) ****

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> m;
        int n = nums.size()/2;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
            if(m[nums[i]]>n){
                return nums[i];
            }
        }
        return -1;
    }
};

******************************************************************************************************************************
**** 2108. Find First Palindromic String in the Array ( 13/02/24 ) ****

class Solution {
public:
    bool solve(string s){
        int i=0,j=s.size()-1;
        while(i<j){
            if(s[i]!=s[j]){
                return false;
            }
            i++; j--;
        }
        return true;
    }

    string firstPalindrome(vector<string>& words) {
        for(int i=0;i<words.size();i++){
            if(solve(words[i])){
                return words[i];
            }
        }
        return "";
    }
};

*********************************************************************************************************************************
**** 2149. Rearrange Array Elements by Sign ( 14/02/24 ) ****

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int> p;
        vector<int> n;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0){
                n.push_back(nums[i]);
            }
            else{
                p.push_back(nums[i]);
            }
        }
        vector<int> ans;
        bool flag = true;
        int a=0,b=0;
        for(int i=0;i<nums.size();i++){
            if(flag){
                ans.push_back(p[a]);
                a++;
                flag=false;
            }
            else{
                ans.push_back(n[b]);
                b++;
                flag=true;
            }
        }
        return ans;
    }
};

************************************************************************************************************************
**** 1481. Least Number of Unique Integers after K Removals ( 16/02/24 ) ****

class Solution {
public:

    class Compare {
public:
    bool operator()(pair<int,int> below, pair<int,int> above)
    {
        if(below.second>=above.second){
           return true;
        }
        return false;
    }
};
   
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        unordered_map<int,int> m;
        for(int i=0;i<arr.size();i++){
            m[arr[i]]++;
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,Compare> pq;
        for(auto i:m){
            pq.push({i.first,i.second});
        } 
        pair<int,int> p;
        while(k){
            p = pq.top();
            pq.pop();
            if(p.second>1){
                pq.push({p.first,p.second-1});
            }
            k--;
        }
        return pq.size();
    }
};

****************************************************************************************************************************
